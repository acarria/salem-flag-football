{"ast":null,"code":"import { versionSelector } from \"./chunk-BTBCV6Q5.mjs\";\nimport { isValidProxyUrl, proxyUrlToAbsoluteURL } from \"./chunk-6NDGN2IU.mjs\";\nimport { addClerkPrefix } from \"./chunk-IFTVZ2LQ.mjs\";\nimport { loadScript } from \"./chunk-E3R3SJ7O.mjs\";\nimport { buildErrorThrower } from \"./chunk-35WGBVWP.mjs\";\nimport { createDevOrStagingUrlCache, parsePublishableKey } from \"./chunk-IV7BOO4U.mjs\";\n\n// src/loadClerkJsScript.ts\nvar FAILED_TO_LOAD_ERROR = \"Clerk: Failed to load Clerk\";\nvar {\n  isDevOrStagingUrl\n} = createDevOrStagingUrlCache();\nvar errorThrower = buildErrorThrower({\n  packageName: \"@clerk/shared\"\n});\nfunction setClerkJsLoadingErrorPackageName(packageName) {\n  errorThrower.setPackageName({\n    packageName\n  });\n}\nvar loadClerkJsScript = async opts => {\n  const existingScript = document.querySelector(\"script[data-clerk-js-script]\");\n  if (existingScript) {\n    return new Promise((resolve, reject) => {\n      existingScript.addEventListener(\"load\", () => {\n        resolve(existingScript);\n      });\n      existingScript.addEventListener(\"error\", () => {\n        reject(FAILED_TO_LOAD_ERROR);\n      });\n    });\n  }\n  if (!opts?.publishableKey) {\n    errorThrower.throwMissingPublishableKeyError();\n    return;\n  }\n  return loadScript(clerkJsScriptUrl(opts), {\n    async: true,\n    crossOrigin: \"anonymous\",\n    nonce: opts.nonce,\n    beforeLoad: applyClerkJsScriptAttributes(opts)\n  }).catch(() => {\n    throw new Error(FAILED_TO_LOAD_ERROR);\n  });\n};\nvar clerkJsScriptUrl = opts => {\n  const {\n    clerkJSUrl,\n    clerkJSVariant,\n    clerkJSVersion,\n    proxyUrl,\n    domain,\n    publishableKey\n  } = opts;\n  if (clerkJSUrl) {\n    return clerkJSUrl;\n  }\n  let scriptHost = \"\";\n  if (!!proxyUrl && isValidProxyUrl(proxyUrl)) {\n    scriptHost = proxyUrlToAbsoluteURL(proxyUrl).replace(/http(s)?:\\/\\//, \"\");\n  } else if (domain && !isDevOrStagingUrl(parsePublishableKey(publishableKey)?.frontendApi || \"\")) {\n    scriptHost = addClerkPrefix(domain);\n  } else {\n    scriptHost = parsePublishableKey(publishableKey)?.frontendApi || \"\";\n  }\n  const variant = clerkJSVariant ? `${clerkJSVariant.replace(/\\.+$/, \"\")}.` : \"\";\n  const version = versionSelector(clerkJSVersion);\n  return `https://${scriptHost}/npm/@clerk/clerk-js@${version}/dist/clerk.${variant}browser.js`;\n};\nvar buildClerkJsScriptAttributes = options => {\n  const obj = {};\n  if (options.publishableKey) {\n    obj[\"data-clerk-publishable-key\"] = options.publishableKey;\n  }\n  if (options.proxyUrl) {\n    obj[\"data-clerk-proxy-url\"] = options.proxyUrl;\n  }\n  if (options.domain) {\n    obj[\"data-clerk-domain\"] = options.domain;\n  }\n  if (options.nonce) {\n    obj.nonce = options.nonce;\n  }\n  return obj;\n};\nvar applyClerkJsScriptAttributes = options => script => {\n  const attributes = buildClerkJsScriptAttributes(options);\n  for (const attribute in attributes) {\n    script.setAttribute(attribute, attributes[attribute]);\n  }\n};\nexport { setClerkJsLoadingErrorPackageName, loadClerkJsScript, clerkJsScriptUrl, buildClerkJsScriptAttributes };\n//# sourceMappingURL=chunk-SZOKD6ZZ.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}