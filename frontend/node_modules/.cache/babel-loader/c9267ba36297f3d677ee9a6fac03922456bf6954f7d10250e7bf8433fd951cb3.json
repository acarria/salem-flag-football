{"ast":null,"code":"const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';class AdminApiService{async request(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const url=`${API_BASE_URL}${endpoint}`;// Get authentication token from Clerk\nlet authHeader={};try{// For now, we'll skip authentication for admin endpoints\n// This is a temporary workaround - in production, you'd need proper JWT handling\nif(endpoint.startsWith('/admin/')){console.log('Admin endpoint detected - using mock data for now');// Return mock data for admin endpoints until authentication is properly implemented\nif(endpoint==='/admin/admins'){return[{id:1,email:'alexcarria1@gmail.com',role:'super_admin',is_active:true,created_at:new Date().toISOString()}];}}}catch(error){console.log('No authentication token available');}const config={headers:{'Content-Type':'application/json',...authHeader,...options.headers},...options};try{const response=await fetch(url,config);if(!response.ok){throw new Error(`API request failed: ${response.status} ${response.statusText}`);}return await response.json();}catch(error){console.error('API request error:',error);throw error;}}// Admin management endpoints\nasync getAdminConfigs(){return this.request('/admin/admins');}async addAdminEmail(email){let role=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'admin';return this.request('/admin/admins',{method:'POST',body:JSON.stringify({email,role})});}async updateAdminConfig(adminId,configData){return this.request(`/admin/admins/${adminId}`,{method:'PUT',body:JSON.stringify(configData)});}async removeAdminEmail(adminId){return this.request(`/admin/admins/${adminId}`,{method:'DELETE'});}}export const adminApi=new AdminApiService();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}