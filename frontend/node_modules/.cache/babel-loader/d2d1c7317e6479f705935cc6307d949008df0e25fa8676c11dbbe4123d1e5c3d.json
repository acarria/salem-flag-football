{"ast":null,"code":"const API_BASE_URL=process.env.REACT_APP_API_URL||'http://localhost:8000';// Types for API responses\n// API service class\nclass ApiService{constructor(){let baseUrl=arguments.length>0&&arguments[0]!==undefined?arguments[0]:API_BASE_URL;this.baseUrl=void 0;this.baseUrl=baseUrl;}async request(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const url=`${this.baseUrl}${endpoint}`;// Get authentication token from Clerk\nlet authHeader={};try{// For now, we'll skip authentication for admin endpoints\n// This is a temporary workaround - in production, you'd need proper JWT handling\nif(endpoint.startsWith('/admin/')){console.log('Admin endpoint detected - using mock data for now');// Return mock data for admin endpoints until authentication is properly implemented\nif(endpoint==='/admin/leagues'){return[];}if(endpoint==='/admin/admins'){return[{id:1,email:'alexcarria1@gmail.com',role:'super_admin',is_active:true,created_at:new Date().toISOString()}];}}}catch(error){console.log('No authentication token available');}const config={headers:{'Content-Type':'application/json',...authHeader,...options.headers},...options};try{const response=await fetch(url,config);if(!response.ok){throw new Error(`API request failed: ${response.status} ${response.statusText}`);}return await response.json();}catch(error){console.error('API request error:',error);throw error;}}// League endpoints\nasync getStandings(){return this.request('/league/standings');}async getSchedule(){return this.request('/league/schedule');}async getActiveLeagues(){return this.request('/league/active');}async getLeagueInfo(){return this.request('/league/info');}async getLeagueRules(){return this.request('/league/rules');}// User profile endpoints\nasync getUserProfile(userId){try{return await this.request(`/user/profile/${userId}`);}catch(error){if(error instanceof Error&&error.message.includes('404')){return null;}throw error;}}async updateUserProfile(userId,profile){return this.request(`/user/profile/${userId}`,{method:'PUT',body:JSON.stringify(profile)});}// Registration endpoints\nasync registerPlayer(registrationData){return this.request('/registration/player',{method:'POST',body:JSON.stringify(registrationData)});}async registerGroup(registrationData){return this.request('/registration/group',{method:'POST',body:JSON.stringify(registrationData)});}// Team endpoints\nasync getTeams(){return this.request('/team');}async getTeam(teamId){return this.request(`/team/${teamId}`);}// Admin endpoints (if user has admin privileges)\nasync getAdminDashboard(){return this.request('/admin/dashboard');}async generateSchedule(){return this.request('/admin/schedule/generate',{method:'POST'});}async randomizeTeams(){return this.request('/admin/teams/randomize',{method:'POST'});}// Admin League Management\nasync createLeague(leagueData){return this.request('/admin/leagues',{method:'POST',body:JSON.stringify(leagueData)});}async getAllLeagues(){return this.request('/admin/leagues');}async getLeagueDetails(leagueId){return this.request(`/admin/leagues/${leagueId}`);}async updateLeague(leagueId,leagueData){return this.request(`/admin/leagues/${leagueId}`,{method:'PUT',body:JSON.stringify(leagueData)});}async deleteLeague(leagueId){return this.request(`/admin/leagues/${leagueId}`,{method:'DELETE'});}async getLeagueStats(leagueId){return this.request(`/admin/leagues/${leagueId}/stats`);}// Admin Management\nasync getAdminConfigs(){return this.request('/admin/admins');}async addAdminEmail(adminData){return this.request('/admin/admins',{method:'POST',body:JSON.stringify(adminData)});}async updateAdminConfig(email,adminData){return this.request(`/admin/admins/${email}`,{method:'PUT',body:JSON.stringify(adminData)});}async removeAdminEmail(email){return this.request(`/admin/admins/${email}`,{method:'DELETE'});}}// Export singleton instance\nexport const apiService=new ApiService();export default apiService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}