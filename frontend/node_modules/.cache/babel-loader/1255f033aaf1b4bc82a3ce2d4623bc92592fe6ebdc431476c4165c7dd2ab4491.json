{"ast":null,"code":"import React,{useState,useEffect}from'react';import{BrowserRouter as Router,Routes,Route}from'react-router-dom';import{useAuth,useUser,useClerk}from'@clerk/clerk-react';import ProfileCompletionModal from'./components/modals/ProfileCompletionModal';import HomePage from'./pages/HomePage';import ProfilePage from'./pages/ProfilePage';import AdminPage from'./pages/AdminPage';import TestPage from'./components/TestPage';import apiService from'./services/api';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const{isSignedIn,isLoaded,userId}=useAuth();const{user}=useUser();const{signOut}=useClerk();const[showProfileModal,setShowProfileModal]=useState(false);const[isProfileComplete,setIsProfileComplete]=useState(false);// Check if user has completed their profile\nuseEffect(()=>{const checkProfile=async()=>{if(isSignedIn&&isLoaded&&userId){try{const profile=await apiService.getUserProfile(userId);if(profile){// User has a profile - they've completed the initial setup\nsetIsProfileComplete(true);}else{// User doesn't have a profile - show the required profile completion modal\nsetShowProfileModal(true);}}catch(err){console.error('Failed to check profile:',err);// If we can't check the profile, assume they need to complete it\nsetShowProfileModal(true);}}};checkProfile();},[isSignedIn,isLoaded,userId]);const handleProfileComplete=async profileData=>{if(userId){try{// Convert ProfileData to UserProfile format\nconst userProfile={firstName:profileData.firstName,lastName:profileData.lastName,email:profileData.email,phone:profileData.phone,dateOfBirth:profileData.dateOfBirth,gender:profileData.gender,communicationsAccepted:profileData.communicationsAccepted,registrationStatus:'not_registered',// Just created account, not registered for league yet\nteamId:undefined,groupName:undefined,registrationDate:undefined,paymentStatus:undefined,waiverStatus:undefined};await apiService.updateUserProfile(userId,userProfile);setIsProfileComplete(true);setShowProfileModal(false);}catch(err){console.error('Failed to save profile:',err);// Still close modal but show error\nsetIsProfileComplete(true);setShowProfileModal(false);}}};const handleProfileCancel=async()=>{// User cancelled profile completion - remove their session\ntry{await signOut();setIsProfileComplete(false);setShowProfileModal(false);}catch(err){console.error('Failed to sign out:',err);}};// Show loading state\nif(!isLoaded){return/*#__PURE__*/_jsx(\"div\",{className:\"min-h-screen flex items-center justify-center bg-black\",children:/*#__PURE__*/_jsx(\"div\",{className:\"text-pumpkin text-xl\",children:\"Loading...\"})});}return/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"min-h-screen bg-black\",children:[/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(HomePage,{})}),/*#__PURE__*/_jsx(Route,{path:\"/profile\",element:/*#__PURE__*/_jsx(ProfilePage,{})}),/*#__PURE__*/_jsx(Route,{path:\"/admin\",element:/*#__PURE__*/_jsx(AdminPage,{})}),/*#__PURE__*/_jsx(Route,{path:\"/test\",element:/*#__PURE__*/_jsx(TestPage,{})})]}),isSignedIn&&!isProfileComplete&&/*#__PURE__*/_jsx(ProfileCompletionModal,{isOpen:showProfileModal,onComplete:handleProfileComplete,onCancel:handleProfileCancel,clerkUser:user})]})});}export default App;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}