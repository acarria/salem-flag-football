{"ast":null,"code":"// src/eventBus.ts\nvar _on = (eventToHandlersMap, latestPayloadMap, event, handler, opts) => {\n  const {\n    notify\n  } = opts || {};\n  let handlers = eventToHandlersMap.get(event);\n  if (!handlers) {\n    handlers = [];\n    eventToHandlersMap.set(event, handlers);\n  }\n  handlers.push(handler);\n  if (notify && latestPayloadMap.has(event)) {\n    handler(latestPayloadMap.get(event));\n  }\n};\nvar _dispatch = (eventToHandlersMap, event, payload) => (eventToHandlersMap.get(event) || []).map(h => h(payload));\nvar _off = (eventToHandlersMap, event, handler) => {\n  const handlers = eventToHandlersMap.get(event);\n  if (handlers) {\n    if (handler) {\n      handlers.splice(handlers.indexOf(handler) >>> 0, 1);\n    } else {\n      eventToHandlersMap.set(event, []);\n    }\n  }\n};\nvar createEventBus = () => {\n  const eventToHandlersMap = /* @__PURE__ */new Map();\n  const latestPayloadMap = /* @__PURE__ */new Map();\n  const eventToPredispatchHandlersMap = /* @__PURE__ */new Map();\n  const emit = (event, payload) => {\n    latestPayloadMap.set(event, payload);\n    _dispatch(eventToPredispatchHandlersMap, event, payload);\n    _dispatch(eventToHandlersMap, event, payload);\n  };\n  return {\n    // Subscribe to an event\n    on: function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _on(eventToHandlersMap, latestPayloadMap, ...args);\n    },\n    // Subscribe to an event with priority\n    // Registered handlers with `prioritizedOn` will be called before handlers registered with `on`\n    prioritizedOn: function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _on(eventToPredispatchHandlersMap, latestPayloadMap, ...args);\n    },\n    // Dispatch an event\n    emit,\n    // Unsubscribe from an event\n    off: function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      return _off(eventToHandlersMap, ...args);\n    },\n    // Unsubscribe from an event with priority\n    // Unsubscribes handlers only registered with `prioritizedOn`\n    prioritizedOff: function () {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      return _off(eventToPredispatchHandlersMap, ...args);\n    },\n    // Internal utilities\n    internal: {\n      retrieveListeners: event => eventToHandlersMap.get(event) || []\n    }\n  };\n};\nexport { createEventBus };\n//# sourceMappingURL=chunk-GVKBGR5N.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}