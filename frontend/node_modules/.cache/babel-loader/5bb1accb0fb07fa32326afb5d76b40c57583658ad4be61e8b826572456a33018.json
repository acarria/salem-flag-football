{"ast":null,"code":"import { isDevelopmentEnvironment } from \"./chunk-7HPDNZ3R.mjs\";\n\n// src/utils/allSettled.ts\nfunction allSettled(iterable) {\n  const promises = Array.from(iterable).map(p => p.then(value => ({\n    status: \"fulfilled\",\n    value\n  }), reason => ({\n    status: \"rejected\",\n    reason\n  })));\n  return Promise.all(promises);\n}\n\n// src/utils/logErrorInDevMode.ts\nvar logErrorInDevMode = message => {\n  if (isDevelopmentEnvironment()) {\n    console.error(`Clerk: ${message}`);\n  }\n};\n\n// src/utils/fastDeepMerge.ts\nvar fastDeepMergeAndReplace = (source, target) => {\n  if (!source || !target) {\n    return;\n  }\n  for (const key in source) {\n    if (Object.prototype.hasOwnProperty.call(source, key) && source[key] !== null && typeof source[key] === `object`) {\n      if (target[key] === void 0) {\n        target[key] = new (Object.getPrototypeOf(source[key]).constructor)();\n      }\n      fastDeepMergeAndReplace(source[key], target[key]);\n    } else if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n};\nvar fastDeepMergeAndKeep = (source, target) => {\n  if (!source || !target) {\n    return;\n  }\n  for (const key in source) {\n    if (Object.prototype.hasOwnProperty.call(source, key) && source[key] !== null && typeof source[key] === `object`) {\n      if (target[key] === void 0) {\n        target[key] = new (Object.getPrototypeOf(source[key]).constructor)();\n      }\n      fastDeepMergeAndKeep(source[key], target[key]);\n    } else if (Object.prototype.hasOwnProperty.call(source, key) && target[key] === void 0) {\n      target[key] = source[key];\n    }\n  }\n};\nexport { allSettled, logErrorInDevMode, fastDeepMergeAndReplace, fastDeepMergeAndKeep };\n//# sourceMappingURL=chunk-ARQUL5DC.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}