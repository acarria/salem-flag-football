{"ast":null,"code":"import { getCurrentOrganizationMembership } from \"../chunk-IBXKDGSZ.mjs\";\nimport { eventMethodCalled } from \"../chunk-YXR7ZZRP.mjs\";\nimport { createDeferredPromise } from \"../chunk-7QJ2QTJL.mjs\";\nimport \"../chunk-7FNX7RWY.mjs\";\nimport \"../chunk-GGFRMWFO.mjs\";\nimport { ClerkRuntimeError, isClerkAPIResponseError } from \"../chunk-35WGBVWP.mjs\";\nimport \"../chunk-IV7BOO4U.mjs\";\nimport \"../chunk-TETGTEI2.mjs\";\nimport \"../chunk-KOH7GTJO.mjs\";\nimport \"../chunk-I6MTSTOF.mjs\";\nimport { isReverificationHint, reverificationError } from \"../chunk-43A5F2IE.mjs\";\nimport { validateReverificationConfig } from \"../chunk-3CN5LOSN.mjs\";\nimport { __export, __reExport } from \"../chunk-7ELT755Q.mjs\";\n\n// src/react/hooks/createContextAndHook.ts\nimport React from \"react\";\nfunction assertContextExists(contextVal, msgOrCtx) {\n  if (!contextVal) {\n    throw typeof msgOrCtx === \"string\" ? new Error(msgOrCtx) : new Error(`${msgOrCtx.displayName} not found`);\n  }\n}\nvar createContextAndHook = (displayName, options) => {\n  const {\n    assertCtxFn = assertContextExists\n  } = options || {};\n  const Ctx = React.createContext(void 0);\n  Ctx.displayName = displayName;\n  const useCtx = () => {\n    const ctx = React.useContext(Ctx);\n    assertCtxFn(ctx, `${displayName} not found`);\n    return ctx.value;\n  };\n  const useCtxWithoutGuarantee = () => {\n    const ctx = React.useContext(Ctx);\n    return ctx ? ctx.value : {};\n  };\n  return [Ctx, useCtx, useCtxWithoutGuarantee];\n};\n\n// src/react/contexts.tsx\nimport React2 from \"react\";\n\n// src/react/clerk-swr.ts\nvar clerk_swr_exports = {};\n__export(clerk_swr_exports, {\n  useSWR: () => default2,\n  useSWRInfinite: () => default3\n});\n__reExport(clerk_swr_exports, swr_star);\nimport * as swr_star from \"swr\";\nimport { default as default2 } from \"swr\";\nimport { default as default3 } from \"swr/infinite\";\n\n// src/react/contexts.tsx\nvar [ClerkInstanceContext, useClerkInstanceContext] = createContextAndHook(\"ClerkInstanceContext\");\nvar [UserContext, useUserContext] = createContextAndHook(\"UserContext\");\nvar [ClientContext, useClientContext] = createContextAndHook(\"ClientContext\");\nvar [SessionContext, useSessionContext] = createContextAndHook(\"SessionContext\");\nvar OptionsContext = React2.createContext({});\nvar [CheckoutContext, useCheckoutContext] = createContextAndHook(\"CheckoutContext\");\nvar __experimental_CheckoutProvider = _ref => {\n  let {\n    children,\n    ...rest\n  } = _ref;\n  return /* @__PURE__ */React2.createElement(CheckoutContext.Provider, {\n    value: {\n      value: rest\n    }\n  }, children);\n};\nfunction useOptionsContext() {\n  const context = React2.useContext(OptionsContext);\n  if (context === void 0) {\n    throw new Error(\"useOptions must be used within an OptionsContext\");\n  }\n  return context;\n}\nvar [OrganizationContextInternal, useOrganizationContext] = createContextAndHook(\"OrganizationContext\");\nvar OrganizationProvider = _ref2 => {\n  let {\n    children,\n    organization,\n    swrConfig\n  } = _ref2;\n  return /* @__PURE__ */React2.createElement(clerk_swr_exports.SWRConfig, {\n    value: swrConfig\n  }, /* @__PURE__ */React2.createElement(OrganizationContextInternal.Provider, {\n    value: {\n      value: {\n        organization\n      }\n    }\n  }, children));\n};\nfunction useAssertWrappedByClerkProvider(displayNameOrFn) {\n  const ctx = React2.useContext(ClerkInstanceContext);\n  if (!ctx) {\n    if (typeof displayNameOrFn === \"function\") {\n      displayNameOrFn();\n      return;\n    }\n    throw new Error(`${displayNameOrFn} can only be used within the <ClerkProvider /> component.\n\nPossible fixes:\n1. Ensure that the <ClerkProvider /> is correctly wrapping your application where this component is used.\n2. Check for multiple versions of the \\`@clerk/shared\\` package in your project. Use a tool like \\`npm ls @clerk/shared\\` to identify multiple versions, and update your dependencies to only rely on one.\n\nLearn more: https://clerk.com/docs/components/clerk-provider`.trim());\n  }\n}\n\n// src/react/hooks/usePagesOrInfinite.ts\nimport { useCallback, useMemo, useRef, useState } from \"react\";\nfunction getDifferentKeys(obj1, obj2) {\n  const keysSet = new Set(Object.keys(obj2));\n  const differentKeysObject = {};\n  for (const key1 of Object.keys(obj1)) {\n    if (!keysSet.has(key1)) {\n      differentKeysObject[key1] = obj1[key1];\n    }\n  }\n  return differentKeysObject;\n}\nvar useWithSafeValues = (params, defaultValues) => {\n  const shouldUseDefaults = typeof params === \"boolean\" && params;\n  const initialPageRef = useRef(shouldUseDefaults ? defaultValues.initialPage : params?.initialPage ?? defaultValues.initialPage);\n  const pageSizeRef = useRef(shouldUseDefaults ? defaultValues.pageSize : params?.pageSize ?? defaultValues.pageSize);\n  const newObj = {};\n  for (const key of Object.keys(defaultValues)) {\n    newObj[key] = shouldUseDefaults ? defaultValues[key] : params?.[key] ?? defaultValues[key];\n  }\n  return {\n    ...newObj,\n    initialPage: initialPageRef.current,\n    pageSize: pageSizeRef.current\n  };\n};\nvar cachingSWROptions = {\n  dedupingInterval: 1e3 * 60,\n  focusThrottleInterval: 1e3 * 60 * 2\n};\nvar usePagesOrInfinite = (params, fetcher, config, cacheKeys) => {\n  const [paginatedPage, setPaginatedPage] = useState(params.initialPage ?? 1);\n  const initialPageRef = useRef(params.initialPage ?? 1);\n  const pageSizeRef = useRef(params.pageSize ?? 10);\n  const enabled = config.enabled ?? true;\n  const cacheMode = config.__experimental_mode === \"cache\";\n  const triggerInfinite = config.infinite ?? false;\n  const keepPreviousData = config.keepPreviousData ?? false;\n  const pagesCacheKey = {\n    ...cacheKeys,\n    ...params,\n    initialPage: paginatedPage,\n    pageSize: pageSizeRef.current\n  };\n  const shouldFetch = !triggerInfinite && enabled && (!cacheMode ? !!fetcher : true);\n  const swrKey = shouldFetch ? pagesCacheKey : null;\n  const swrFetcher = !cacheMode && !!fetcher ? cacheKeyParams => {\n    const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n    return fetcher({\n      ...params,\n      ...requestParams\n    });\n  } : null;\n  const {\n    data: swrData,\n    isValidating: swrIsValidating,\n    isLoading: swrIsLoading,\n    error: swrError,\n    mutate: swrMutate\n  } = default2(swrKey, swrFetcher, {\n    keepPreviousData,\n    ...cachingSWROptions\n  });\n  const {\n    data: swrInfiniteData,\n    isLoading: swrInfiniteIsLoading,\n    isValidating: swrInfiniteIsValidating,\n    error: swrInfiniteError,\n    size,\n    setSize,\n    mutate: swrInfiniteMutate\n  } = default3(pageIndex => {\n    if (!triggerInfinite || !enabled) {\n      return null;\n    }\n    return {\n      ...params,\n      ...cacheKeys,\n      initialPage: initialPageRef.current + pageIndex,\n      pageSize: pageSizeRef.current\n    };\n  }, cacheKeyParams => {\n    const requestParams = getDifferentKeys(cacheKeyParams, cacheKeys);\n    return fetcher?.(requestParams);\n  }, cachingSWROptions);\n  const page = useMemo(() => {\n    if (triggerInfinite) {\n      return size;\n    }\n    return paginatedPage;\n  }, [triggerInfinite, size, paginatedPage]);\n  const fetchPage = useCallback(numberOrgFn => {\n    if (triggerInfinite) {\n      void setSize(numberOrgFn);\n      return;\n    }\n    return setPaginatedPage(numberOrgFn);\n  }, [setSize]);\n  const data = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.map(a => a?.data).flat() ?? [];\n    }\n    return swrData?.data ?? [];\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n  const count = useMemo(() => {\n    if (triggerInfinite) {\n      return swrInfiniteData?.[swrInfiniteData?.length - 1]?.total_count || 0;\n    }\n    return swrData?.total_count ?? 0;\n  }, [triggerInfinite, swrData, swrInfiniteData]);\n  const isLoading = triggerInfinite ? swrInfiniteIsLoading : swrIsLoading;\n  const isFetching = triggerInfinite ? swrInfiniteIsValidating : swrIsValidating;\n  const error = (triggerInfinite ? swrInfiniteError : swrError) ?? null;\n  const isError = !!error;\n  const fetchNext = useCallback(() => {\n    fetchPage(n => Math.max(0, n + 1));\n  }, [fetchPage]);\n  const fetchPrevious = useCallback(() => {\n    fetchPage(n => Math.max(0, n - 1));\n  }, [fetchPage]);\n  const offsetCount = (initialPageRef.current - 1) * pageSizeRef.current;\n  const pageCount = Math.ceil((count - offsetCount) / pageSizeRef.current);\n  const hasNextPage = count - offsetCount * pageSizeRef.current > page * pageSizeRef.current;\n  const hasPreviousPage = (page - 1) * pageSizeRef.current > offsetCount * pageSizeRef.current;\n  const setData = triggerInfinite ? value => swrInfiniteMutate(value, {\n    revalidate: false\n  }) : value => swrMutate(value, {\n    revalidate: false\n  });\n  const revalidate = triggerInfinite ? () => swrInfiniteMutate() : () => swrMutate();\n  return {\n    data,\n    count,\n    error,\n    isLoading,\n    isFetching,\n    isError,\n    page,\n    pageCount,\n    fetchPage,\n    fetchNext,\n    fetchPrevious,\n    hasNextPage,\n    hasPreviousPage,\n    // Let the hook return type define this type\n    revalidate,\n    // Let the hook return type define this type\n    setData\n  };\n};\n\n// src/react/hooks/useOrganization.tsx\nvar undefinedPaginatedResource = {\n  data: void 0,\n  count: void 0,\n  error: void 0,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: void 0,\n  pageCount: void 0,\n  fetchPage: void 0,\n  fetchNext: void 0,\n  fetchPrevious: void 0,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: void 0,\n  setData: void 0\n};\nfunction useOrganization(params) {\n  const {\n    domains: domainListParams,\n    membershipRequests: membershipRequestsListParams,\n    memberships: membersListParams,\n    invitations: invitationsListParams,\n    subscriptions: subscriptionsListParams\n  } = params || {};\n  useAssertWrappedByClerkProvider(\"useOrganization\");\n  const {\n    organization\n  } = useOrganizationContext();\n  const session = useSessionContext();\n  const domainSafeValues = useWithSafeValues(domainListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false,\n    enrollmentMode: void 0\n  });\n  const membershipRequestSafeValues = useWithSafeValues(membershipRequestsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  const membersSafeValues = useWithSafeValues(membersListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    role: void 0,\n    keepPreviousData: false,\n    infinite: false,\n    query: void 0\n  });\n  const invitationsSafeValues = useWithSafeValues(invitationsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    status: [\"pending\"],\n    keepPreviousData: false,\n    infinite: false\n  });\n  const subscriptionsSafeValues = useWithSafeValues(subscriptionsListParams, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false\n  });\n  const clerk = useClerkInstanceContext();\n  clerk.telemetry?.record(eventMethodCalled(\"useOrganization\"));\n  const domainParams = typeof domainListParams === \"undefined\" ? void 0 : {\n    initialPage: domainSafeValues.initialPage,\n    pageSize: domainSafeValues.pageSize,\n    enrollmentMode: domainSafeValues.enrollmentMode\n  };\n  const membershipRequestParams = typeof membershipRequestsListParams === \"undefined\" ? void 0 : {\n    initialPage: membershipRequestSafeValues.initialPage,\n    pageSize: membershipRequestSafeValues.pageSize,\n    status: membershipRequestSafeValues.status\n  };\n  const membersParams = typeof membersListParams === \"undefined\" ? void 0 : {\n    initialPage: membersSafeValues.initialPage,\n    pageSize: membersSafeValues.pageSize,\n    role: membersSafeValues.role,\n    query: membersSafeValues.query\n  };\n  const invitationsParams = typeof invitationsListParams === \"undefined\" ? void 0 : {\n    initialPage: invitationsSafeValues.initialPage,\n    pageSize: invitationsSafeValues.pageSize,\n    status: invitationsSafeValues.status\n  };\n  const subscriptionsParams = typeof subscriptionsListParams === \"undefined\" ? void 0 : {\n    initialPage: subscriptionsSafeValues.initialPage,\n    pageSize: subscriptionsSafeValues.pageSize,\n    orgId: organization?.id\n  };\n  const domains = usePagesOrInfinite({\n    ...domainParams\n  }, organization?.getDomains, {\n    keepPreviousData: domainSafeValues.keepPreviousData,\n    infinite: domainSafeValues.infinite,\n    enabled: !!domainParams\n  }, {\n    type: \"domains\",\n    organizationId: organization?.id\n  });\n  const membershipRequests = usePagesOrInfinite({\n    ...membershipRequestParams\n  }, organization?.getMembershipRequests, {\n    keepPreviousData: membershipRequestSafeValues.keepPreviousData,\n    infinite: membershipRequestSafeValues.infinite,\n    enabled: !!membershipRequestParams\n  }, {\n    type: \"membershipRequests\",\n    organizationId: organization?.id\n  });\n  const memberships = usePagesOrInfinite(membersParams || {}, organization?.getMemberships, {\n    keepPreviousData: membersSafeValues.keepPreviousData,\n    infinite: membersSafeValues.infinite,\n    enabled: !!membersParams\n  }, {\n    type: \"members\",\n    organizationId: organization?.id\n  });\n  const invitations = usePagesOrInfinite({\n    ...invitationsParams\n  }, organization?.getInvitations, {\n    keepPreviousData: invitationsSafeValues.keepPreviousData,\n    infinite: invitationsSafeValues.infinite,\n    enabled: !!invitationsParams\n  }, {\n    type: \"invitations\",\n    organizationId: organization?.id\n  });\n  const subscriptions = usePagesOrInfinite({\n    ...subscriptionsParams\n  }, organization?.getSubscriptions, {\n    keepPreviousData: subscriptionsSafeValues.keepPreviousData,\n    infinite: subscriptionsSafeValues.infinite,\n    enabled: !!subscriptionsParams\n  }, {\n    type: \"subscriptions\",\n    organizationId: organization?.id\n  });\n  if (organization === void 0) {\n    return {\n      isLoaded: false,\n      organization: void 0,\n      membership: void 0,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource,\n      subscriptions: undefinedPaginatedResource\n    };\n  }\n  if (organization === null) {\n    return {\n      isLoaded: true,\n      organization: null,\n      membership: null,\n      domains: null,\n      membershipRequests: null,\n      memberships: null,\n      invitations: null,\n      subscriptions: null\n    };\n  }\n  if (!clerk.loaded && organization) {\n    return {\n      isLoaded: true,\n      organization,\n      membership: void 0,\n      domains: undefinedPaginatedResource,\n      membershipRequests: undefinedPaginatedResource,\n      memberships: undefinedPaginatedResource,\n      invitations: undefinedPaginatedResource,\n      subscriptions: undefinedPaginatedResource\n    };\n  }\n  return {\n    isLoaded: clerk.loaded,\n    organization,\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    membership: getCurrentOrganizationMembership(session.user.organizationMemberships, organization.id),\n    // your membership in the current org\n    domains,\n    membershipRequests,\n    memberships,\n    invitations,\n    subscriptions\n  };\n}\n\n// src/react/hooks/useOrganizationList.tsx\nvar undefinedPaginatedResource2 = {\n  data: void 0,\n  count: void 0,\n  error: void 0,\n  isLoading: false,\n  isFetching: false,\n  isError: false,\n  page: void 0,\n  pageCount: void 0,\n  fetchPage: void 0,\n  fetchNext: void 0,\n  fetchPrevious: void 0,\n  hasNextPage: false,\n  hasPreviousPage: false,\n  revalidate: void 0,\n  setData: void 0\n};\nfunction useOrganizationList(params) {\n  const {\n    userMemberships,\n    userInvitations,\n    userSuggestions\n  } = params || {};\n  useAssertWrappedByClerkProvider(\"useOrganizationList\");\n  const userMembershipsSafeValues = useWithSafeValues(userMemberships, {\n    initialPage: 1,\n    pageSize: 10,\n    keepPreviousData: false,\n    infinite: false\n  });\n  const userInvitationsSafeValues = useWithSafeValues(userInvitations, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  const userSuggestionsSafeValues = useWithSafeValues(userSuggestions, {\n    initialPage: 1,\n    pageSize: 10,\n    status: \"pending\",\n    keepPreviousData: false,\n    infinite: false\n  });\n  const clerk = useClerkInstanceContext();\n  const user = useUserContext();\n  clerk.telemetry?.record(eventMethodCalled(\"useOrganizationList\"));\n  const userMembershipsParams = typeof userMemberships === \"undefined\" ? void 0 : {\n    initialPage: userMembershipsSafeValues.initialPage,\n    pageSize: userMembershipsSafeValues.pageSize\n  };\n  const userInvitationsParams = typeof userInvitations === \"undefined\" ? void 0 : {\n    initialPage: userInvitationsSafeValues.initialPage,\n    pageSize: userInvitationsSafeValues.pageSize,\n    status: userInvitationsSafeValues.status\n  };\n  const userSuggestionsParams = typeof userSuggestions === \"undefined\" ? void 0 : {\n    initialPage: userSuggestionsSafeValues.initialPage,\n    pageSize: userSuggestionsSafeValues.pageSize,\n    status: userSuggestionsSafeValues.status\n  };\n  const isClerkLoaded = !!(clerk.loaded && user);\n  const memberships = usePagesOrInfinite(userMembershipsParams || {}, user?.getOrganizationMemberships, {\n    keepPreviousData: userMembershipsSafeValues.keepPreviousData,\n    infinite: userMembershipsSafeValues.infinite,\n    enabled: !!userMembershipsParams\n  }, {\n    type: \"userMemberships\",\n    userId: user?.id\n  });\n  const invitations = usePagesOrInfinite({\n    ...userInvitationsParams\n  }, user?.getOrganizationInvitations, {\n    keepPreviousData: userInvitationsSafeValues.keepPreviousData,\n    infinite: userInvitationsSafeValues.infinite,\n    enabled: !!userInvitationsParams\n  }, {\n    type: \"userInvitations\",\n    userId: user?.id\n  });\n  const suggestions = usePagesOrInfinite({\n    ...userSuggestionsParams\n  }, user?.getOrganizationSuggestions, {\n    keepPreviousData: userSuggestionsSafeValues.keepPreviousData,\n    infinite: userSuggestionsSafeValues.infinite,\n    enabled: !!userSuggestionsParams\n  }, {\n    type: \"userSuggestions\",\n    userId: user?.id\n  });\n  if (!isClerkLoaded) {\n    return {\n      isLoaded: false,\n      createOrganization: void 0,\n      setActive: void 0,\n      userMemberships: undefinedPaginatedResource2,\n      userInvitations: undefinedPaginatedResource2,\n      userSuggestions: undefinedPaginatedResource2\n    };\n  }\n  return {\n    isLoaded: isClerkLoaded,\n    setActive: clerk.setActive,\n    createOrganization: clerk.createOrganization,\n    userMemberships: memberships,\n    userInvitations: invitations,\n    userSuggestions: suggestions\n  };\n}\n\n// src/react/hooks/useSafeLayoutEffect.tsx\nimport React3 from \"react\";\nvar useSafeLayoutEffect = typeof window !== \"undefined\" ? React3.useLayoutEffect : React3.useEffect;\n\n// src/react/hooks/useSession.ts\nvar hookName = `useSession`;\nvar useSession = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  useAssertWrappedByClerkProvider(hookName);\n  const session = useSessionContext();\n  const clerk = useClerkInstanceContext();\n  clerk.telemetry?.record(eventMethodCalled(hookName));\n  if (session === void 0) {\n    return {\n      isLoaded: false,\n      isSignedIn: void 0,\n      session: void 0\n    };\n  }\n  const pendingAsSignedOut = session?.status === \"pending\" && (options.treatPendingAsSignedOut ?? clerk.__internal_getOption(\"treatPendingAsSignedOut\"));\n  const isSignedOut = session === null || pendingAsSignedOut;\n  if (isSignedOut) {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      session: null\n    };\n  }\n  return {\n    isLoaded: true,\n    isSignedIn: true,\n    session\n  };\n};\n\n// src/react/hooks/useSessionList.ts\nvar hookName2 = \"useSessionList\";\nvar useSessionList = () => {\n  useAssertWrappedByClerkProvider(hookName2);\n  const isomorphicClerk = useClerkInstanceContext();\n  const client = useClientContext();\n  const clerk = useClerkInstanceContext();\n  clerk.telemetry?.record(eventMethodCalled(hookName2));\n  if (!client) {\n    return {\n      isLoaded: false,\n      sessions: void 0,\n      setActive: void 0\n    };\n  }\n  return {\n    isLoaded: true,\n    sessions: client.sessions,\n    setActive: isomorphicClerk.setActive\n  };\n};\n\n// src/react/hooks/useUser.ts\nvar hookName3 = \"useUser\";\nfunction useUser() {\n  useAssertWrappedByClerkProvider(hookName3);\n  const user = useUserContext();\n  const clerk = useClerkInstanceContext();\n  clerk.telemetry?.record(eventMethodCalled(hookName3));\n  if (user === void 0) {\n    return {\n      isLoaded: false,\n      isSignedIn: void 0,\n      user: void 0\n    };\n  }\n  if (user === null) {\n    return {\n      isLoaded: true,\n      isSignedIn: false,\n      user: null\n    };\n  }\n  return {\n    isLoaded: true,\n    isSignedIn: true,\n    user\n  };\n}\n\n// src/react/hooks/useClerk.ts\nvar useClerk = () => {\n  useAssertWrappedByClerkProvider(\"useClerk\");\n  return useClerkInstanceContext();\n};\n\n// src/react/hooks/useDeepEqualMemo.ts\nimport { dequal as deepEqual } from \"dequal\";\nimport React4 from \"react\";\nvar useDeepEqualMemoize = value => {\n  const ref = React4.useRef(value);\n  if (!deepEqual(value, ref.current)) {\n    ref.current = value;\n  }\n  return React4.useMemo(() => ref.current, [ref.current]);\n};\nvar useDeepEqualMemo = (factory, dependencyArray) => {\n  return React4.useMemo(factory, useDeepEqualMemoize(dependencyArray));\n};\nvar isDeeplyEqual = deepEqual;\n\n// src/react/hooks/useReverification.ts\nimport { useCallback as useCallback2, useRef as useRef2 } from \"react\";\nvar CLERK_API_REVERIFICATION_ERROR_CODE = \"session_reverification_required\";\nasync function resolveResult(result) {\n  try {\n    const r = await result;\n    if (r instanceof Response) {\n      return r.json();\n    }\n    return r;\n  } catch (e) {\n    if (isClerkAPIResponseError(e) && e.errors.find(_ref3 => {\n      let {\n        code\n      } = _ref3;\n      return code === CLERK_API_REVERIFICATION_ERROR_CODE;\n    })) {\n      return reverificationError();\n    }\n    throw e;\n  }\n}\nfunction createReverificationHandler(params) {\n  function assertReverification(fetcher) {\n    return async function () {\n      let result = await resolveResult(fetcher(...arguments));\n      if (isReverificationHint(result)) {\n        const resolvers = createDeferredPromise();\n        const isValidMetadata = validateReverificationConfig(result.clerk_error.metadata?.reverification);\n        const level = isValidMetadata ? isValidMetadata().level : void 0;\n        const cancel = () => {\n          resolvers.reject(new ClerkRuntimeError(\"User cancelled attempted verification\", {\n            code: \"reverification_cancelled\"\n          }));\n        };\n        const complete = () => {\n          resolvers.resolve(true);\n        };\n        if (params.onNeedsReverification === void 0) {\n          params.openUIComponent?.({\n            level,\n            afterVerification: complete,\n            afterVerificationCancelled: cancel\n          });\n        } else {\n          params.onNeedsReverification({\n            cancel,\n            complete,\n            level\n          });\n        }\n        await resolvers.promise;\n        result = await resolveResult(fetcher(...arguments));\n      }\n      return result;\n    };\n  }\n  return assertReverification;\n}\nvar useReverification = (fetcher, options) => {\n  const {\n    __internal_openReverification,\n    telemetry\n  } = useClerk();\n  const fetcherRef = useRef2(fetcher);\n  const optionsRef = useRef2(options);\n  telemetry?.record(eventMethodCalled(\"useReverification\", {\n    onNeedsReverification: Boolean(options?.onNeedsReverification)\n  }));\n  useSafeLayoutEffect(() => {\n    fetcherRef.current = fetcher;\n    optionsRef.current = options;\n  });\n  return useCallback2(function () {\n    const handler = createReverificationHandler({\n      openUIComponent: __internal_openReverification,\n      telemetry,\n      ...optionsRef.current\n    })(fetcherRef.current);\n    return handler(...arguments);\n  }, [__internal_openReverification, telemetry]);\n};\n\n// src/react/hooks/createCommerceHook.tsx\nfunction createCommerceHook(_ref4) {\n  let {\n    hookName: hookName4,\n    resourceType,\n    useFetcher,\n    options\n  } = _ref4;\n  return function useCommerceHook(params) {\n    const {\n      for: _for,\n      ...paginationParams\n    } = params;\n    useAssertWrappedByClerkProvider(hookName4);\n    const fetchFn = useFetcher(_for);\n    const safeValues = useWithSafeValues(paginationParams, {\n      initialPage: 1,\n      pageSize: 10,\n      keepPreviousData: false,\n      infinite: false,\n      __experimental_mode: void 0\n    });\n    const clerk = useClerkInstanceContext();\n    const user = useUserContext();\n    const {\n      organization\n    } = useOrganizationContext();\n    clerk.telemetry?.record(eventMethodCalled(hookName4));\n    const hookParams = typeof paginationParams === \"undefined\" ? void 0 : {\n      initialPage: safeValues.initialPage,\n      pageSize: safeValues.pageSize,\n      ...(_for === \"organization\" ? {\n        orgId: organization?.id\n      } : {})\n    };\n    const isClerkLoaded = !!(clerk.loaded && (options?.unauthenticated ? true : user));\n    const isEnabled = !!hookParams && isClerkLoaded;\n    const result = usePagesOrInfinite(hookParams || {}, fetchFn, {\n      keepPreviousData: safeValues.keepPreviousData,\n      infinite: safeValues.infinite,\n      enabled: isEnabled,\n      __experimental_mode: safeValues.__experimental_mode\n    }, {\n      type: resourceType,\n      userId: user?.id,\n      ...(_for === \"organization\" ? {\n        orgId: organization?.id\n      } : {})\n    });\n    return result;\n  };\n}\n\n// src/react/hooks/useStatements.tsx\nvar useStatements = createCommerceHook({\n  hookName: \"useStatements\",\n  resourceType: \"commerce-statements\",\n  useFetcher: () => {\n    const clerk = useClerkInstanceContext();\n    return clerk.billing.getStatements;\n  }\n});\n\n// src/react/hooks/usePaymentAttempts.tsx\nvar usePaymentAttempts = createCommerceHook({\n  hookName: \"usePaymentAttempts\",\n  resourceType: \"commerce-payment-attempts\",\n  useFetcher: () => {\n    const clerk = useClerkInstanceContext();\n    return clerk.billing.getPaymentAttempts;\n  }\n});\n\n// src/react/hooks/usePaymentMethods.tsx\nvar usePaymentMethods = createCommerceHook({\n  hookName: \"usePaymentMethods\",\n  resourceType: \"commerce-payment-methods\",\n  useFetcher: resource => {\n    const {\n      organization\n    } = useOrganizationContext();\n    const user = useUserContext();\n    if (resource === \"organization\") {\n      return organization?.getPaymentSources;\n    }\n    return user?.getPaymentSources;\n  }\n});\n\n// src/react/hooks/useSubscriptionItems.tsx\nvar useSubscriptionItems = createCommerceHook({\n  hookName: \"useSubscriptionItems\",\n  resourceType: \"commerce-subscription-items\",\n  useFetcher: () => {\n    const clerk = useClerkInstanceContext();\n    return clerk.billing.getSubscriptions;\n  }\n});\n\n// src/react/hooks/usePlans.tsx\nvar usePlans = createCommerceHook({\n  hookName: \"usePlans\",\n  resourceType: \"commerce-plans\",\n  useFetcher: _for => {\n    const clerk = useClerkInstanceContext();\n    return params => clerk.billing.getPlans({\n      ...params,\n      for: _for === \"organization\" ? \"org\" : \"user\"\n    });\n  },\n  options: {\n    unauthenticated: true\n  }\n});\n\n// src/react/hooks/useCheckout.ts\nimport { useMemo as useMemo2, useSyncExternalStore } from \"react\";\nvar useCheckout = options => {\n  const contextOptions = useCheckoutContext();\n  const {\n    for: forOrganization,\n    planId,\n    planPeriod\n  } = options || contextOptions;\n  const clerk = useClerk();\n  const {\n    organization\n  } = useOrganization();\n  const {\n    user\n  } = useUser();\n  if (!user) {\n    throw new Error(\"Clerk: User is not authenticated\");\n  }\n  if (forOrganization === \"organization\" && !organization) {\n    throw new Error(\"Clerk: Use `setActive` to set the organization\");\n  }\n  const manager = useMemo2(() => clerk.__experimental_checkout({\n    planId,\n    planPeriod,\n    for: forOrganization\n  }), [user.id, organization?.id, planId, planPeriod, forOrganization]);\n  const managerProperties = useSyncExternalStore(cb => manager.subscribe(cb), () => manager.getState(), () => manager.getState());\n  const properties = useMemo2(() => {\n    if (!managerProperties.checkout) {\n      return {\n        id: null,\n        externalClientSecret: null,\n        externalGatewayId: null,\n        statement_id: null,\n        status: null,\n        totals: null,\n        isImmediatePlanChange: null,\n        planPeriod: null,\n        plan: null,\n        paymentSource: null\n      };\n    }\n    const {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      reload,\n      confirm,\n      pathRoot,\n      // All the above need to be removed from the properties\n      ...rest\n    } = managerProperties.checkout;\n    return rest;\n  }, [managerProperties.checkout]);\n  const checkout = {\n    ...properties,\n    getState: manager.getState,\n    start: manager.start,\n    confirm: manager.confirm,\n    clear: manager.clear,\n    finalize: manager.finalize,\n    isStarting: managerProperties.isStarting,\n    isConfirming: managerProperties.isConfirming,\n    error: managerProperties.error,\n    status: managerProperties.status,\n    fetchStatus: managerProperties.fetchStatus\n  };\n  return {\n    checkout\n  };\n};\n\n// src/react/commerce.tsx\nimport { useCallback as useCallback3, useEffect as useEffect2, useMemo as useMemo3, useState as useState3 } from \"react\";\nimport React6 from \"react\";\nimport useSWR from \"swr\";\nimport useSWRMutation from \"swr/mutation\";\n\n// src/react/stripe-react/index.tsx\nimport React5, { useState as useState2 } from \"react\";\n\n// src/react/stripe-react/utils.ts\nimport { useEffect, useRef as useRef3 } from \"react\";\nvar usePrevious = value => {\n  const ref = useRef3(value);\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n};\nvar useAttachEvent = (element, event, cb) => {\n  const cbDefined = !!cb;\n  const cbRef = useRef3(cb);\n  useEffect(() => {\n    cbRef.current = cb;\n  }, [cb]);\n  useEffect(() => {\n    if (!cbDefined || !element) {\n      return () => {};\n    }\n    const decoratedCb = function () {\n      if (cbRef.current) {\n        cbRef.current(...arguments);\n      }\n    };\n    element.on(event, decoratedCb);\n    return () => {\n      element.off(event, decoratedCb);\n    };\n  }, [cbDefined, event, element, cbRef]);\n};\n\n// src/react/stripe-react/index.tsx\nvar ElementsContext = React5.createContext(null);\nElementsContext.displayName = \"ElementsContext\";\nvar parseElementsContext = (ctx, useCase) => {\n  if (!ctx) {\n    throw new Error(`Could not find Elements context; You need to wrap the part of your app that ${useCase} in an <Elements> provider.`);\n  }\n  return ctx;\n};\nvar Elements = _ref5 => {\n  let {\n    stripe: rawStripeProp,\n    options,\n    children\n  } = _ref5;\n  const parsed = React5.useMemo(() => parseStripeProp(rawStripeProp), [rawStripeProp]);\n  const [ctx, setContext] = React5.useState(() => ({\n    stripe: parsed.tag === \"sync\" ? parsed.stripe : null,\n    elements: parsed.tag === \"sync\" ? parsed.stripe.elements(options) : null\n  }));\n  React5.useEffect(() => {\n    let isMounted = true;\n    const safeSetContext = stripe => {\n      setContext(ctx2 => {\n        if (ctx2.stripe) return ctx2;\n        return {\n          stripe,\n          elements: stripe.elements(options)\n        };\n      });\n    };\n    if (parsed.tag === \"async\" && !ctx.stripe) {\n      parsed.stripePromise.then(stripe => {\n        if (stripe && isMounted) {\n          safeSetContext(stripe);\n        }\n      });\n    } else if (parsed.tag === \"sync\" && !ctx.stripe) {\n      safeSetContext(parsed.stripe);\n    }\n    return () => {\n      isMounted = false;\n    };\n  }, [parsed, ctx, options]);\n  const prevStripe = usePrevious(rawStripeProp);\n  React5.useEffect(() => {\n    if (prevStripe !== null && prevStripe !== rawStripeProp) {\n      console.warn(\"Unsupported prop change on Elements: You cannot change the `stripe` prop after setting it.\");\n    }\n  }, [prevStripe, rawStripeProp]);\n  const prevOptions = usePrevious(options);\n  React5.useEffect(() => {\n    if (!ctx.elements) {\n      return;\n    }\n    const updates = extractAllowedOptionsUpdates(options, prevOptions, [\"clientSecret\", \"fonts\"]);\n    if (updates) {\n      ctx.elements.update(updates);\n    }\n  }, [options, prevOptions, ctx.elements]);\n  return /* @__PURE__ */React5.createElement(ElementsContext.Provider, {\n    value: ctx\n  }, children);\n};\nvar useElementsContextWithUseCase = useCaseMessage => {\n  const ctx = React5.useContext(ElementsContext);\n  return parseElementsContext(ctx, useCaseMessage);\n};\nvar useElements = () => {\n  const {\n    elements\n  } = useElementsContextWithUseCase(\"calls useElements()\");\n  return elements;\n};\nvar INVALID_STRIPE_ERROR = \"Invalid prop `stripe` supplied to `Elements`. We recommend using the `loadStripe` utility from `@stripe/stripe-js`. See https://stripe.com/docs/stripe-js/react#elements-props-stripe for details.\";\nvar validateStripe = function (maybeStripe) {\n  let errorMsg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : INVALID_STRIPE_ERROR;\n  if (maybeStripe === null || isStripe(maybeStripe)) {\n    return maybeStripe;\n  }\n  throw new Error(errorMsg);\n};\nvar parseStripeProp = function (raw) {\n  let errorMsg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : INVALID_STRIPE_ERROR;\n  if (isPromise(raw)) {\n    return {\n      tag: \"async\",\n      stripePromise: Promise.resolve(raw).then(result => validateStripe(result, errorMsg))\n    };\n  }\n  const stripe = validateStripe(raw, errorMsg);\n  if (stripe === null) {\n    return {\n      tag: \"empty\"\n    };\n  }\n  return {\n    tag: \"sync\",\n    stripe\n  };\n};\nvar isUnknownObject = raw => {\n  return raw !== null && typeof raw === \"object\";\n};\nvar isPromise = raw => {\n  return isUnknownObject(raw) && typeof raw.then === \"function\";\n};\nvar isStripe = raw => {\n  return isUnknownObject(raw) && typeof raw.elements === \"function\" && typeof raw.createToken === \"function\" && typeof raw.createPaymentMethod === \"function\" && typeof raw.confirmCardPayment === \"function\";\n};\nvar extractAllowedOptionsUpdates = (options, prevOptions, immutableKeys) => {\n  if (!isUnknownObject(options)) {\n    return null;\n  }\n  return Object.keys(options).reduce((newOptions, key) => {\n    const isUpdated = !isUnknownObject(prevOptions) || !isEqual(options[key], prevOptions[key]);\n    if (immutableKeys.includes(key)) {\n      if (isUpdated) {\n        console.warn(`Unsupported prop change: options.${key} is not a mutable property.`);\n      }\n      return newOptions;\n    }\n    if (!isUpdated) {\n      return newOptions;\n    }\n    return {\n      ...(newOptions || {}),\n      [key]: options[key]\n    };\n  }, null);\n};\nvar PLAIN_OBJECT_STR = \"[object Object]\";\nvar isEqual = (left, right) => {\n  if (!isUnknownObject(left) || !isUnknownObject(right)) {\n    return left === right;\n  }\n  const leftArray = Array.isArray(left);\n  const rightArray = Array.isArray(right);\n  if (leftArray !== rightArray) return false;\n  const leftPlainObject = Object.prototype.toString.call(left) === PLAIN_OBJECT_STR;\n  const rightPlainObject = Object.prototype.toString.call(right) === PLAIN_OBJECT_STR;\n  if (leftPlainObject !== rightPlainObject) return false;\n  if (!leftPlainObject && !leftArray) return left === right;\n  const leftKeys = Object.keys(left);\n  const rightKeys = Object.keys(right);\n  if (leftKeys.length !== rightKeys.length) return false;\n  const keySet = {};\n  for (let i = 0; i < leftKeys.length; i += 1) {\n    keySet[leftKeys[i]] = true;\n  }\n  for (let i = 0; i < rightKeys.length; i += 1) {\n    keySet[rightKeys[i]] = true;\n  }\n  const allKeys = Object.keys(keySet);\n  if (allKeys.length !== leftKeys.length) {\n    return false;\n  }\n  const l = left;\n  const r = right;\n  const pred = key => {\n    return isEqual(l[key], r[key]);\n  };\n  return allKeys.every(pred);\n};\nvar useStripe = () => {\n  const {\n    stripe\n  } = useElementsOrCheckoutSdkContextWithUseCase(\"calls useStripe()\");\n  return stripe;\n};\nvar useElementsOrCheckoutSdkContextWithUseCase = useCaseString => {\n  const elementsContext = React5.useContext(ElementsContext);\n  return parseElementsContext(elementsContext, useCaseString);\n};\nvar capitalized = str => str.charAt(0).toUpperCase() + str.slice(1);\nvar createElementComponent = (type, isServer2) => {\n  const displayName = `${capitalized(type)}Element`;\n  const ClientElement = _ref6 => {\n    let {\n      id,\n      className,\n      fallback,\n      options = {},\n      onBlur,\n      onFocus,\n      onReady,\n      onChange,\n      onEscape,\n      onClick,\n      onLoadError,\n      onLoaderStart,\n      onNetworksChange,\n      onConfirm,\n      onCancel,\n      onShippingAddressChange,\n      onShippingRateChange\n    } = _ref6;\n    const ctx = useElementsOrCheckoutSdkContextWithUseCase(`mounts <${displayName}>`);\n    const elements = \"elements\" in ctx ? ctx.elements : null;\n    const [element, setElement] = React5.useState(null);\n    const elementRef = React5.useRef(null);\n    const domNode = React5.useRef(null);\n    const [isReady, setReady] = useState2(false);\n    useAttachEvent(element, \"blur\", onBlur);\n    useAttachEvent(element, \"focus\", onFocus);\n    useAttachEvent(element, \"escape\", onEscape);\n    useAttachEvent(element, \"click\", onClick);\n    useAttachEvent(element, \"loaderror\", onLoadError);\n    useAttachEvent(element, \"loaderstart\", onLoaderStart);\n    useAttachEvent(element, \"networkschange\", onNetworksChange);\n    useAttachEvent(element, \"confirm\", onConfirm);\n    useAttachEvent(element, \"cancel\", onCancel);\n    useAttachEvent(element, \"shippingaddresschange\", onShippingAddressChange);\n    useAttachEvent(element, \"shippingratechange\", onShippingRateChange);\n    useAttachEvent(element, \"change\", onChange);\n    let readyCallback;\n    if (onReady) {\n      readyCallback = () => {\n        setReady(true);\n        onReady(element);\n      };\n    }\n    useAttachEvent(element, \"ready\", readyCallback);\n    React5.useLayoutEffect(() => {\n      if (elementRef.current === null && domNode.current !== null && elements) {\n        let newElement = null;\n        if (elements) {\n          newElement = elements.create(type, options);\n        }\n        elementRef.current = newElement;\n        setElement(newElement);\n        if (newElement) {\n          newElement.mount(domNode.current);\n        }\n      }\n    }, [elements, options]);\n    const prevOptions = usePrevious(options);\n    React5.useEffect(() => {\n      if (!elementRef.current) {\n        return;\n      }\n      const updates = extractAllowedOptionsUpdates(options, prevOptions, [\"paymentRequest\"]);\n      if (updates && \"update\" in elementRef.current) {\n        elementRef.current.update(updates);\n      }\n    }, [options, prevOptions]);\n    React5.useLayoutEffect(() => {\n      return () => {\n        if (elementRef.current && typeof elementRef.current.destroy === \"function\") {\n          try {\n            elementRef.current.destroy();\n            elementRef.current = null;\n          } catch {}\n        }\n      };\n    }, []);\n    return /* @__PURE__ */React5.createElement(React5.Fragment, null, !isReady && fallback, /* @__PURE__ */React5.createElement(\"div\", {\n      id,\n      className,\n      ref: domNode\n    }));\n  };\n  const ServerElement = props => {\n    useElementsOrCheckoutSdkContextWithUseCase(`mounts <${displayName}>`);\n    const {\n      id,\n      className\n    } = props;\n    return /* @__PURE__ */React5.createElement(\"div\", {\n      id,\n      className\n    });\n  };\n  const Element = isServer2 ? ServerElement : ClientElement;\n  Element.displayName = displayName;\n  Element.__elementType = type;\n  return Element;\n};\nvar isServer = typeof window === \"undefined\";\nvar PaymentElement = createElementComponent(\"payment\", isServer);\n\n// src/react/commerce.tsx\nvar [StripeLibsContext, useStripeLibsContext] = createContextAndHook(\"StripeLibsContext\");\nvar StripeLibsProvider = _ref7 => {\n  let {\n    children\n  } = _ref7;\n  const clerk = useClerk();\n  const {\n    data: stripeClerkLibs\n  } = useSWR(\"clerk-stripe-sdk\", async () => {\n    const loadStripe = await clerk.__internal_loadStripeJs();\n    return {\n      loadStripe\n    };\n  }, {\n    keepPreviousData: true,\n    revalidateOnFocus: false,\n    dedupingInterval: Infinity\n  });\n  return /* @__PURE__ */React6.createElement(StripeLibsContext.Provider, {\n    value: {\n      value: stripeClerkLibs || null\n    }\n  }, children);\n};\nvar useInternalEnvironment = () => {\n  const clerk = useClerk();\n  return clerk.__unstable__environment;\n};\nvar usePaymentSourceUtils = forResource => {\n  const {\n    organization\n  } = useOrganization();\n  const {\n    user\n  } = useUser();\n  const resource = forResource === \"org\" ? organization : user;\n  const stripeClerkLibs = useStripeLibsContext();\n  const {\n    data: initializedPaymentSource,\n    trigger: initializePaymentSource\n  } = useSWRMutation({\n    key: \"commerce-payment-source-initialize\",\n    resourceId: resource?.id\n  }, () => resource?.initializePaymentSource({\n    gateway: \"stripe\"\n  }));\n  const environment = useInternalEnvironment();\n  useEffect2(() => {\n    initializePaymentSource().catch(() => {});\n  }, []);\n  const externalGatewayId = initializedPaymentSource?.externalGatewayId;\n  const externalClientSecret = initializedPaymentSource?.externalClientSecret;\n  const paymentMethodOrder = initializedPaymentSource?.paymentMethodOrder;\n  const stripePublishableKey = environment?.commerceSettings.billing.stripePublishableKey;\n  const {\n    data: stripe\n  } = useSWR(stripeClerkLibs && externalGatewayId && stripePublishableKey ? {\n    key: \"stripe-sdk\",\n    externalGatewayId,\n    stripePublishableKey\n  } : null, _ref8 => {\n    let {\n      stripePublishableKey: stripePublishableKey2,\n      externalGatewayId: externalGatewayId2\n    } = _ref8;\n    return stripeClerkLibs?.loadStripe(stripePublishableKey2, {\n      stripeAccount: externalGatewayId2\n    });\n  }, {\n    keepPreviousData: true,\n    revalidateOnFocus: false,\n    dedupingInterval: 1e3 * 60\n    // 1 minute\n  });\n  return {\n    stripe,\n    initializePaymentSource,\n    externalClientSecret,\n    paymentMethodOrder\n  };\n};\nvar [PaymentElementContext, usePaymentElementContext] = createContextAndHook(\"PaymentElementContext\");\nvar [StripeUtilsContext, useStripeUtilsContext] = createContextAndHook(\"StripeUtilsContext\");\nvar ValidateStripeUtils = _ref9 => {\n  let {\n    children\n  } = _ref9;\n  const stripe = useStripe();\n  const elements = useElements();\n  return /* @__PURE__ */React6.createElement(StripeUtilsContext.Provider, {\n    value: {\n      value: {\n        stripe,\n        elements\n      }\n    }\n  }, children);\n};\nvar DummyStripeUtils = _ref0 => {\n  let {\n    children\n  } = _ref0;\n  return /* @__PURE__ */React6.createElement(StripeUtilsContext.Provider, {\n    value: {\n      value: {}\n    }\n  }, children);\n};\nvar PropsProvider = _ref1 => {\n  let {\n    children,\n    ...props\n  } = _ref1;\n  const utils = usePaymentSourceUtils(props.for);\n  const [isPaymentElementReady, setIsPaymentElementReady] = useState3(false);\n  return /* @__PURE__ */React6.createElement(PaymentElementContext.Provider, {\n    value: {\n      value: {\n        ...props,\n        ...utils,\n        setIsPaymentElementReady,\n        isPaymentElementReady\n      }\n    }\n  }, children);\n};\nvar PaymentElementProvider = _ref10 => {\n  let {\n    children,\n    ...props\n  } = _ref10;\n  return /* @__PURE__ */React6.createElement(StripeLibsProvider, null, /* @__PURE__ */React6.createElement(PropsProvider, {\n    ...props\n  }, /* @__PURE__ */React6.createElement(PaymentElementInternalRoot, null, children)));\n};\nvar PaymentElementInternalRoot = props => {\n  const {\n    stripe,\n    externalClientSecret,\n    stripeAppearance\n  } = usePaymentElementContext();\n  if (stripe && externalClientSecret) {\n    return /* @__PURE__ */React6.createElement(Elements, {\n      key: externalClientSecret,\n      stripe,\n      options: {\n        clientSecret: externalClientSecret,\n        appearance: {\n          variables: stripeAppearance\n        }\n      }\n    }, /* @__PURE__ */React6.createElement(ValidateStripeUtils, null, props.children));\n  }\n  return /* @__PURE__ */React6.createElement(DummyStripeUtils, null, props.children);\n};\nvar PaymentElement2 = _ref11 => {\n  let {\n    fallback\n  } = _ref11;\n  const {\n    setIsPaymentElementReady,\n    paymentMethodOrder,\n    checkout,\n    stripe,\n    externalClientSecret,\n    paymentDescription,\n    for: subscriberType\n  } = usePaymentElementContext();\n  const environment = useInternalEnvironment();\n  const applePay = useMemo3(() => {\n    if (!checkout || !checkout.totals || !checkout.plan) {\n      return void 0;\n    }\n    return {\n      recurringPaymentRequest: {\n        paymentDescription: paymentDescription || \"\",\n        managementURL: subscriberType === \"org\" ? environment?.displayConfig.organizationProfileUrl || \"\" : environment?.displayConfig.userProfileUrl || \"\",\n        regularBilling: {\n          amount: checkout.totals.totalDueNow?.amount || checkout.totals.grandTotal.amount,\n          label: checkout.plan.name,\n          recurringPaymentIntervalUnit: checkout.planPeriod === \"annual\" ? \"year\" : \"month\"\n        }\n      }\n    };\n  }, [checkout, paymentDescription, subscriberType, environment]);\n  const options = useMemo3(() => {\n    return {\n      layout: {\n        type: \"tabs\",\n        defaultCollapsed: false\n      },\n      paymentMethodOrder,\n      applePay\n    };\n  }, [applePay, paymentMethodOrder]);\n  const onReady = useCallback3(() => {\n    setIsPaymentElementReady(true);\n  }, [setIsPaymentElementReady]);\n  if (!stripe || !externalClientSecret) {\n    return /* @__PURE__ */React6.createElement(React6.Fragment, null, fallback);\n  }\n  return /* @__PURE__ */React6.createElement(PaymentElement, {\n    fallback,\n    onReady,\n    options\n  });\n};\nvar throwLibsMissingError = () => {\n  throw new Error(\"Clerk: Unable to submit, Stripe libraries are not yet loaded. Be sure to check `isFormReady` before calling `submit`.\");\n};\nvar usePaymentElement = () => {\n  const {\n    isPaymentElementReady,\n    initializePaymentSource\n  } = usePaymentElementContext();\n  const {\n    stripe,\n    elements\n  } = useStripeUtilsContext();\n  const {\n    externalClientSecret\n  } = usePaymentElementContext();\n  const submit = useCallback3(async () => {\n    if (!stripe || !elements) {\n      return throwLibsMissingError();\n    }\n    const {\n      setupIntent,\n      error\n    } = await stripe.confirmSetup({\n      elements,\n      confirmParams: {\n        return_url: window.location.href\n      },\n      redirect: \"if_required\"\n    });\n    if (error) {\n      return {\n        data: null,\n        error: {\n          gateway: \"stripe\",\n          error: {\n            code: error.code,\n            message: error.message,\n            type: error.type\n          }\n        }\n      };\n    }\n    return {\n      data: {\n        gateway: \"stripe\",\n        paymentToken: setupIntent.payment_method\n      },\n      error: null\n    };\n  }, [stripe, elements]);\n  const reset = useCallback3(async () => {\n    if (!stripe || !elements) {\n      return throwLibsMissingError();\n    }\n    await initializePaymentSource();\n  }, [stripe, elements, initializePaymentSource]);\n  const isProviderReady = Boolean(stripe && externalClientSecret);\n  if (!isProviderReady) {\n    return {\n      submit: throwLibsMissingError,\n      reset: throwLibsMissingError,\n      isFormReady: false,\n      provider: void 0,\n      isProviderReady: false\n    };\n  }\n  return {\n    submit,\n    reset,\n    isFormReady: isPaymentElementReady,\n    provider: {\n      name: \"stripe\"\n    },\n    isProviderReady\n  };\n};\nexport { ClerkInstanceContext, ClientContext, OptionsContext, OrganizationProvider, SessionContext, UserContext, __experimental_CheckoutProvider, PaymentElement2 as __experimental_PaymentElement, PaymentElementProvider as __experimental_PaymentElementProvider, useCheckout as __experimental_useCheckout, usePaymentAttempts as __experimental_usePaymentAttempts, usePaymentElement as __experimental_usePaymentElement, usePaymentMethods as __experimental_usePaymentMethods, usePlans as __experimental_usePlans, useStatements as __experimental_useStatements, useSubscriptionItems as __experimental_useSubscriptionItems, assertContextExists, createContextAndHook, isDeeplyEqual, useAssertWrappedByClerkProvider, useClerk, useClerkInstanceContext, useClientContext, useDeepEqualMemo, useOptionsContext, useOrganization, useOrganizationContext, useOrganizationList, useReverification, useSafeLayoutEffect, useSession, useSessionContext, useSessionList, useUser, useUserContext };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}