{"ast":null,"code":"import { AuthContext, AuthenticateWithRedirectCallback, ClerkDegraded, ClerkFailed, ClerkLoaded, ClerkLoading, IsomorphicClerkContext, Protect, RedirectToCreateOrganization, RedirectToOrganizationProfile, RedirectToSignIn, RedirectToSignUp, RedirectToUserProfile, SignedIn, SignedOut, __experimental_CheckoutProvider, __experimental_PaymentElement, __experimental_PaymentElementProvider, __experimental_useCheckout, __experimental_usePaymentElement, customLinkWrongProps, customMenuItemsIgnoredComponent, customPageWrongProps, customPagesIgnoredComponent, errorThrower, multipleChildrenInButtonComponent, multipleClerkProvidersError, organizationProfileLinkRenderedError, organizationProfilePageRenderedError, setErrorThrowerOptions, unsupportedNonBrowserDomainOrProxyUrlFunction, useAuth, useClerk, useEmailLink, useOrganization, useOrganizationList, useReverification, useSession, useSessionList, useSignIn, useSignUp, useUser, userButtonIgnoredComponent, userButtonMenuActionRenderedError, userButtonMenuItemLinkWrongProps, userButtonMenuItemsActionWrongsProps, userButtonMenuItemsRenderedError, userButtonMenuLinkRenderedError, userProfileLinkRenderedError, userProfilePageRenderedError, withClerk } from \"./chunk-5OEED2TE.mjs\";\nimport { __privateAdd, __privateGet, __privateMethod, __privateSet } from \"./chunk-OANWQR3B.mjs\";\n\n// src/polyfills.ts\nif (typeof window !== \"undefined\" && !window.global) {\n  window.global = typeof global === \"undefined\" ? window : global;\n}\n\n// src/index.ts\nimport { setClerkJsLoadingErrorPackageName } from \"@clerk/shared/loadClerkJsScript\";\n\n// src/components/uiComponents.tsx\nimport { logErrorInDevMode as logErrorInDevMode3 } from \"@clerk/shared/utils\";\nimport React8, { createContext, createElement, useContext } from \"react\";\n\n// src/utils/childrenUtils.tsx\nimport React from \"react\";\nvar assertSingleChild = children => name => {\n  try {\n    return React.Children.only(children);\n  } catch {\n    return errorThrower.throw(multipleChildrenInButtonComponent(name));\n  }\n};\nvar normalizeWithDefaultValue = (children, defaultText) => {\n  if (!children) {\n    children = defaultText;\n  }\n  if (typeof children === \"string\") {\n    children = /* @__PURE__ */React.createElement(\"button\", null, children);\n  }\n  return children;\n};\nvar safeExecute = cb => function () {\n  if (cb && typeof cb === \"function\") {\n    return cb(...arguments);\n  }\n};\n\n// src/utils/isConstructor.ts\nfunction isConstructor(f) {\n  return typeof f === \"function\";\n}\n\n// src/utils/useMaxAllowedInstancesGuard.tsx\nimport React2 from \"react\";\nvar counts = /* @__PURE__ */new Map();\nfunction useMaxAllowedInstancesGuard(name, error) {\n  let maxCount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  React2.useEffect(() => {\n    const count = counts.get(name) || 0;\n    if (count == maxCount) {\n      return errorThrower.throw(error);\n    }\n    counts.set(name, count + 1);\n    return () => {\n      counts.set(name, (counts.get(name) || 1) - 1);\n    };\n  }, []);\n}\nfunction withMaxAllowedInstancesGuard(WrappedComponent, name, error) {\n  const displayName = WrappedComponent.displayName || WrappedComponent.name || name || \"Component\";\n  const Hoc = props => {\n    useMaxAllowedInstancesGuard(name, error);\n    return /* @__PURE__ */React2.createElement(WrappedComponent, {\n      ...props\n    });\n  };\n  Hoc.displayName = `withMaxAllowedInstancesGuard(${displayName})`;\n  return Hoc;\n}\n\n// src/utils/useCustomElementPortal.tsx\nimport React3, { useState } from \"react\";\nimport { createPortal } from \"react-dom\";\nvar useCustomElementPortal = elements => {\n  const initialState = Array(elements.length).fill(null);\n  const [nodes, setNodes] = useState(initialState);\n  return elements.map((el, index) => ({\n    id: el.id,\n    mount: node => setNodes(prevState => prevState.map((n, i) => i === index ? node : n)),\n    unmount: () => setNodes(prevState => prevState.map((n, i) => i === index ? null : n)),\n    portal: () => /* @__PURE__ */React3.createElement(React3.Fragment, null, nodes[index] ? createPortal(el.component, nodes[index]) : null)\n  }));\n};\n\n// src/utils/useCustomPages.tsx\nimport { logErrorInDevMode } from \"@clerk/shared/utils\";\nimport React5 from \"react\";\n\n// src/utils/componentValidation.ts\nimport React4 from \"react\";\nvar isThatComponent = (v, component) => {\n  return !!v && React4.isValidElement(v) && (v == null ? void 0 : v.type) === component;\n};\n\n// src/utils/useCustomPages.tsx\nvar useUserProfileCustomPages = (children, options) => {\n  const reorderItemsLabels = [\"account\", \"security\"];\n  return useCustomPages({\n    children,\n    reorderItemsLabels,\n    LinkComponent: UserProfileLink,\n    PageComponent: UserProfilePage,\n    MenuItemsComponent: MenuItems,\n    componentName: \"UserProfile\"\n  }, options);\n};\nvar useOrganizationProfileCustomPages = (children, options) => {\n  const reorderItemsLabels = [\"general\", \"members\"];\n  return useCustomPages({\n    children,\n    reorderItemsLabels,\n    LinkComponent: OrganizationProfileLink,\n    PageComponent: OrganizationProfilePage,\n    componentName: \"OrganizationProfile\"\n  }, options);\n};\nvar useSanitizedChildren = children => {\n  const sanitizedChildren = [];\n  const excludedComponents = [OrganizationProfileLink, OrganizationProfilePage, MenuItems, UserProfilePage, UserProfileLink];\n  React5.Children.forEach(children, child => {\n    if (!excludedComponents.some(component => isThatComponent(child, component))) {\n      sanitizedChildren.push(child);\n    }\n  });\n  return sanitizedChildren;\n};\nvar useCustomPages = (params, options) => {\n  const {\n    children,\n    LinkComponent,\n    PageComponent,\n    MenuItemsComponent,\n    reorderItemsLabels,\n    componentName\n  } = params;\n  const {\n    allowForAnyChildren = false\n  } = options || {};\n  const validChildren = [];\n  React5.Children.forEach(children, child => {\n    if (!isThatComponent(child, PageComponent) && !isThatComponent(child, LinkComponent) && !isThatComponent(child, MenuItemsComponent)) {\n      if (child && !allowForAnyChildren) {\n        logErrorInDevMode(customPagesIgnoredComponent(componentName));\n      }\n      return;\n    }\n    const {\n      props\n    } = child;\n    const {\n      children: children2,\n      label,\n      url,\n      labelIcon\n    } = props;\n    if (isThatComponent(child, PageComponent)) {\n      if (isReorderItem(props, reorderItemsLabels)) {\n        validChildren.push({\n          label\n        });\n      } else if (isCustomPage(props)) {\n        validChildren.push({\n          label,\n          labelIcon,\n          children: children2,\n          url\n        });\n      } else {\n        logErrorInDevMode(customPageWrongProps(componentName));\n        return;\n      }\n    }\n    if (isThatComponent(child, LinkComponent)) {\n      if (isExternalLink(props)) {\n        validChildren.push({\n          label,\n          labelIcon,\n          url\n        });\n      } else {\n        logErrorInDevMode(customLinkWrongProps(componentName));\n        return;\n      }\n    }\n  });\n  const customPageContents = [];\n  const customPageLabelIcons = [];\n  const customLinkLabelIcons = [];\n  validChildren.forEach((cp, index) => {\n    if (isCustomPage(cp)) {\n      customPageContents.push({\n        component: cp.children,\n        id: index\n      });\n      customPageLabelIcons.push({\n        component: cp.labelIcon,\n        id: index\n      });\n      return;\n    }\n    if (isExternalLink(cp)) {\n      customLinkLabelIcons.push({\n        component: cp.labelIcon,\n        id: index\n      });\n    }\n  });\n  const customPageContentsPortals = useCustomElementPortal(customPageContents);\n  const customPageLabelIconsPortals = useCustomElementPortal(customPageLabelIcons);\n  const customLinkLabelIconsPortals = useCustomElementPortal(customLinkLabelIcons);\n  const customPages = [];\n  const customPagesPortals = [];\n  validChildren.forEach((cp, index) => {\n    if (isReorderItem(cp, reorderItemsLabels)) {\n      customPages.push({\n        label: cp.label\n      });\n      return;\n    }\n    if (isCustomPage(cp)) {\n      const {\n        portal: contentPortal,\n        mount,\n        unmount\n      } = customPageContentsPortals.find(p => p.id === index);\n      const {\n        portal: labelPortal,\n        mount: mountIcon,\n        unmount: unmountIcon\n      } = customPageLabelIconsPortals.find(p => p.id === index);\n      customPages.push({\n        label: cp.label,\n        url: cp.url,\n        mount,\n        unmount,\n        mountIcon,\n        unmountIcon\n      });\n      customPagesPortals.push(contentPortal);\n      customPagesPortals.push(labelPortal);\n      return;\n    }\n    if (isExternalLink(cp)) {\n      const {\n        portal: labelPortal,\n        mount: mountIcon,\n        unmount: unmountIcon\n      } = customLinkLabelIconsPortals.find(p => p.id === index);\n      customPages.push({\n        label: cp.label,\n        url: cp.url,\n        mountIcon,\n        unmountIcon\n      });\n      customPagesPortals.push(labelPortal);\n      return;\n    }\n  });\n  return {\n    customPages,\n    customPagesPortals\n  };\n};\nvar isReorderItem = (childProps, validItems) => {\n  const {\n    children,\n    label,\n    url,\n    labelIcon\n  } = childProps;\n  return !children && !url && !labelIcon && validItems.some(v => v === label);\n};\nvar isCustomPage = childProps => {\n  const {\n    children,\n    label,\n    url,\n    labelIcon\n  } = childProps;\n  return !!children && !!url && !!labelIcon && !!label;\n};\nvar isExternalLink = childProps => {\n  const {\n    children,\n    label,\n    url,\n    labelIcon\n  } = childProps;\n  return !children && !!url && !!labelIcon && !!label;\n};\n\n// src/utils/useCustomMenuItems.tsx\nimport { logErrorInDevMode as logErrorInDevMode2 } from \"@clerk/shared/utils\";\nimport React6 from \"react\";\nvar useUserButtonCustomMenuItems = children => {\n  const reorderItemsLabels = [\"manageAccount\", \"signOut\"];\n  return useCustomMenuItems({\n    children,\n    reorderItemsLabels,\n    MenuItemsComponent: MenuItems,\n    MenuActionComponent: MenuAction,\n    MenuLinkComponent: MenuLink,\n    UserProfileLinkComponent: UserProfileLink,\n    UserProfilePageComponent: UserProfilePage\n  });\n};\nvar useCustomMenuItems = _ref => {\n  let {\n    children,\n    MenuItemsComponent,\n    MenuActionComponent,\n    MenuLinkComponent,\n    UserProfileLinkComponent,\n    UserProfilePageComponent,\n    reorderItemsLabels\n  } = _ref;\n  const validChildren = [];\n  const customMenuItems = [];\n  const customMenuItemsPortals = [];\n  React6.Children.forEach(children, child => {\n    if (!isThatComponent(child, MenuItemsComponent) && !isThatComponent(child, UserProfileLinkComponent) && !isThatComponent(child, UserProfilePageComponent)) {\n      if (child) {\n        logErrorInDevMode2(userButtonIgnoredComponent);\n      }\n      return;\n    }\n    if (isThatComponent(child, UserProfileLinkComponent) || isThatComponent(child, UserProfilePageComponent)) {\n      return;\n    }\n    const {\n      props\n    } = child;\n    React6.Children.forEach(props.children, child2 => {\n      if (!isThatComponent(child2, MenuActionComponent) && !isThatComponent(child2, MenuLinkComponent)) {\n        if (child2) {\n          logErrorInDevMode2(customMenuItemsIgnoredComponent);\n        }\n        return;\n      }\n      const {\n        props: props2\n      } = child2;\n      const {\n        label,\n        labelIcon,\n        href,\n        onClick,\n        open\n      } = props2;\n      if (isThatComponent(child2, MenuActionComponent)) {\n        if (isReorderItem2(props2, reorderItemsLabels)) {\n          validChildren.push({\n            label\n          });\n        } else if (isCustomMenuItem(props2)) {\n          const baseItem = {\n            label,\n            labelIcon\n          };\n          if (onClick !== void 0) {\n            validChildren.push({\n              ...baseItem,\n              onClick\n            });\n          } else if (open !== void 0) {\n            validChildren.push({\n              ...baseItem,\n              open: open.startsWith(\"/\") ? open : `/${open}`\n            });\n          } else {\n            logErrorInDevMode2(\"Custom menu item must have either onClick or open property\");\n            return;\n          }\n        } else {\n          logErrorInDevMode2(userButtonMenuItemsActionWrongsProps);\n          return;\n        }\n      }\n      if (isThatComponent(child2, MenuLinkComponent)) {\n        if (isExternalLink2(props2)) {\n          validChildren.push({\n            label,\n            labelIcon,\n            href\n          });\n        } else {\n          logErrorInDevMode2(userButtonMenuItemLinkWrongProps);\n          return;\n        }\n      }\n    });\n  });\n  const customMenuItemLabelIcons = [];\n  const customLinkLabelIcons = [];\n  validChildren.forEach((mi, index) => {\n    if (isCustomMenuItem(mi)) {\n      customMenuItemLabelIcons.push({\n        component: mi.labelIcon,\n        id: index\n      });\n    }\n    if (isExternalLink2(mi)) {\n      customLinkLabelIcons.push({\n        component: mi.labelIcon,\n        id: index\n      });\n    }\n  });\n  const customMenuItemLabelIconsPortals = useCustomElementPortal(customMenuItemLabelIcons);\n  const customLinkLabelIconsPortals = useCustomElementPortal(customLinkLabelIcons);\n  validChildren.forEach((mi, index) => {\n    if (isReorderItem2(mi, reorderItemsLabels)) {\n      customMenuItems.push({\n        label: mi.label\n      });\n    }\n    if (isCustomMenuItem(mi)) {\n      const {\n        portal: iconPortal,\n        mount: mountIcon,\n        unmount: unmountIcon\n      } = customMenuItemLabelIconsPortals.find(p => p.id === index);\n      const menuItem = {\n        label: mi.label,\n        mountIcon,\n        unmountIcon\n      };\n      if (\"onClick\" in mi) {\n        menuItem.onClick = mi.onClick;\n      } else if (\"open\" in mi) {\n        menuItem.open = mi.open;\n      }\n      customMenuItems.push(menuItem);\n      customMenuItemsPortals.push(iconPortal);\n    }\n    if (isExternalLink2(mi)) {\n      const {\n        portal: iconPortal,\n        mount: mountIcon,\n        unmount: unmountIcon\n      } = customLinkLabelIconsPortals.find(p => p.id === index);\n      customMenuItems.push({\n        label: mi.label,\n        href: mi.href,\n        mountIcon,\n        unmountIcon\n      });\n      customMenuItemsPortals.push(iconPortal);\n    }\n  });\n  return {\n    customMenuItems,\n    customMenuItemsPortals\n  };\n};\nvar isReorderItem2 = (childProps, validItems) => {\n  const {\n    children,\n    label,\n    onClick,\n    labelIcon\n  } = childProps;\n  return !children && !onClick && !labelIcon && validItems.some(v => v === label);\n};\nvar isCustomMenuItem = childProps => {\n  const {\n    label,\n    labelIcon,\n    onClick,\n    open\n  } = childProps;\n  return !!labelIcon && !!label && (typeof onClick === \"function\" || typeof open === \"string\");\n};\nvar isExternalLink2 = childProps => {\n  const {\n    label,\n    href,\n    labelIcon\n  } = childProps;\n  return !!href && !!labelIcon && !!label;\n};\n\n// src/utils/useWaitForComponentMount.ts\nimport { useEffect, useRef, useState as useState2 } from \"react\";\nfunction waitForElementChildren(options) {\n  const {\n    root = document == null ? void 0 : document.body,\n    selector,\n    timeout = 0\n  } = options;\n  return new Promise((resolve, reject) => {\n    if (!root) {\n      reject(new Error(\"No root element provided\"));\n      return;\n    }\n    let elementToWatch = root;\n    if (selector) {\n      elementToWatch = root == null ? void 0 : root.querySelector(selector);\n    }\n    const isElementAlreadyPresent = (elementToWatch == null ? void 0 : elementToWatch.childElementCount) && elementToWatch.childElementCount > 0;\n    if (isElementAlreadyPresent) {\n      resolve();\n      return;\n    }\n    const observer = new MutationObserver(mutationsList => {\n      for (const mutation of mutationsList) {\n        if (mutation.type === \"childList\") {\n          if (!elementToWatch && selector) {\n            elementToWatch = root == null ? void 0 : root.querySelector(selector);\n          }\n          if ((elementToWatch == null ? void 0 : elementToWatch.childElementCount) && elementToWatch.childElementCount > 0) {\n            observer.disconnect();\n            resolve();\n            return;\n          }\n        }\n      }\n    });\n    observer.observe(root, {\n      childList: true,\n      subtree: true\n    });\n    if (timeout > 0) {\n      setTimeout(() => {\n        observer.disconnect();\n        reject(new Error(`Timeout waiting for element children`));\n      }, timeout);\n    }\n  });\n}\nfunction useWaitForComponentMount(component) {\n  const watcherRef = useRef();\n  const [status, setStatus] = useState2(\"rendering\");\n  useEffect(() => {\n    if (!component) {\n      throw new Error(\"Clerk: no component name provided, unable to detect mount.\");\n    }\n    if (typeof window !== \"undefined\" && !watcherRef.current) {\n      watcherRef.current = waitForElementChildren({\n        selector: `[data-clerk-component=\"${component}\"]`\n      }).then(() => {\n        setStatus(\"rendered\");\n      }).catch(() => {\n        setStatus(\"error\");\n      });\n    }\n  }, [component]);\n  return status;\n}\n\n// src/components/ClerkHostRenderer.tsx\nimport { without } from \"@clerk/shared/object\";\nimport { isDeeplyEqual } from \"@clerk/shared/react\";\nimport React7 from \"react\";\nvar isMountProps = props => {\n  return \"mount\" in props;\n};\nvar isOpenProps = props => {\n  return \"open\" in props;\n};\nvar stripMenuItemIconHandlers = menuItems => {\n  return menuItems == null ? void 0 : menuItems.map(_ref2 => {\n    let {\n      mountIcon,\n      unmountIcon,\n      ...rest\n    } = _ref2;\n    return rest;\n  });\n};\nvar ClerkHostRenderer = class extends React7.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.rootRef = React7.createRef();\n  }\n  componentDidUpdate(_prevProps) {\n    var _a, _b, _c, _d;\n    if (!isMountProps(_prevProps) || !isMountProps(this.props)) {\n      return;\n    }\n    const prevProps = without(_prevProps.props, \"customPages\", \"customMenuItems\", \"children\");\n    const newProps = without(this.props.props, \"customPages\", \"customMenuItems\", \"children\");\n    const customPagesChanged = ((_a = prevProps.customPages) == null ? void 0 : _a.length) !== ((_b = newProps.customPages) == null ? void 0 : _b.length);\n    const customMenuItemsChanged = ((_c = prevProps.customMenuItems) == null ? void 0 : _c.length) !== ((_d = newProps.customMenuItems) == null ? void 0 : _d.length);\n    const prevMenuItemsWithoutHandlers = stripMenuItemIconHandlers(_prevProps.props.customMenuItems);\n    const newMenuItemsWithoutHandlers = stripMenuItemIconHandlers(this.props.props.customMenuItems);\n    if (!isDeeplyEqual(prevProps, newProps) || !isDeeplyEqual(prevMenuItemsWithoutHandlers, newMenuItemsWithoutHandlers) || customPagesChanged || customMenuItemsChanged) {\n      if (this.rootRef.current) {\n        this.props.updateProps({\n          node: this.rootRef.current,\n          props: this.props.props\n        });\n      }\n    }\n  }\n  componentDidMount() {\n    if (this.rootRef.current) {\n      if (isMountProps(this.props)) {\n        this.props.mount(this.rootRef.current, this.props.props);\n      }\n      if (isOpenProps(this.props)) {\n        this.props.open(this.props.props);\n      }\n    }\n  }\n  componentWillUnmount() {\n    if (this.rootRef.current) {\n      if (isMountProps(this.props)) {\n        this.props.unmount(this.rootRef.current);\n      }\n      if (isOpenProps(this.props)) {\n        this.props.close();\n      }\n    }\n  }\n  render() {\n    const {\n      hideRootHtmlElement = false\n    } = this.props;\n    const rootAttributes = {\n      ref: this.rootRef,\n      ...this.props.rootProps,\n      ...(this.props.component && {\n        \"data-clerk-component\": this.props.component\n      })\n    };\n    return /* @__PURE__ */React7.createElement(React7.Fragment, null, !hideRootHtmlElement && /* @__PURE__ */React7.createElement(\"div\", {\n      ...rootAttributes\n    }), this.props.children);\n  }\n};\n\n// src/components/uiComponents.tsx\nvar CustomPortalsRenderer = props => {\n  var _a, _b;\n  return /* @__PURE__ */React8.createElement(React8.Fragment, null, (_a = props == null ? void 0 : props.customPagesPortals) == null ? void 0 : _a.map((portal, index) => createElement(portal, {\n    key: index\n  })), (_b = props == null ? void 0 : props.customMenuItemsPortals) == null ? void 0 : _b.map((portal, index) => createElement(portal, {\n    key: index\n  })));\n};\nvar SignIn = withClerk(_ref3 => {\n  let {\n    clerk,\n    component,\n    fallback,\n    ...props\n  } = _ref3;\n  const mountingStatus = useWaitForComponentMount(component);\n  const shouldShowFallback = mountingStatus === \"rendering\" || !clerk.loaded;\n  const rendererRootProps = {\n    ...(shouldShowFallback && fallback && {\n      style: {\n        display: \"none\"\n      }\n    })\n  };\n  return /* @__PURE__ */React8.createElement(React8.Fragment, null, shouldShowFallback && fallback, clerk.loaded && /* @__PURE__ */React8.createElement(ClerkHostRenderer, {\n    component,\n    mount: clerk.mountSignIn,\n    unmount: clerk.unmountSignIn,\n    updateProps: clerk.__unstable__updateProps,\n    props,\n    rootProps: rendererRootProps\n  }));\n}, {\n  component: \"SignIn\",\n  renderWhileLoading: true\n});\nvar SignUp = withClerk(_ref4 => {\n  let {\n    clerk,\n    component,\n    fallback,\n    ...props\n  } = _ref4;\n  const mountingStatus = useWaitForComponentMount(component);\n  const shouldShowFallback = mountingStatus === \"rendering\" || !clerk.loaded;\n  const rendererRootProps = {\n    ...(shouldShowFallback && fallback && {\n      style: {\n        display: \"none\"\n      }\n    })\n  };\n  return /* @__PURE__ */React8.createElement(React8.Fragment, null, shouldShowFallback && fallback, clerk.loaded && /* @__PURE__ */React8.createElement(ClerkHostRenderer, {\n    component,\n    mount: clerk.mountSignUp,\n    unmount: clerk.unmountSignUp,\n    updateProps: clerk.__unstable__updateProps,\n    props,\n    rootProps: rendererRootProps\n  }));\n}, {\n  component: \"SignUp\",\n  renderWhileLoading: true\n});\nfunction UserProfilePage(_ref5) {\n  let {\n    children\n  } = _ref5;\n  logErrorInDevMode3(userProfilePageRenderedError);\n  return /* @__PURE__ */React8.createElement(React8.Fragment, null, children);\n}\nfunction UserProfileLink(_ref6) {\n  let {\n    children\n  } = _ref6;\n  logErrorInDevMode3(userProfileLinkRenderedError);\n  return /* @__PURE__ */React8.createElement(React8.Fragment, null, children);\n}\nvar _UserProfile = withClerk(_ref7 => {\n  let {\n    clerk,\n    component,\n    fallback,\n    ...props\n  } = _ref7;\n  const mountingStatus = useWaitForComponentMount(component);\n  const shouldShowFallback = mountingStatus === \"rendering\" || !clerk.loaded;\n  const rendererRootProps = {\n    ...(shouldShowFallback && fallback && {\n      style: {\n        display: \"none\"\n      }\n    })\n  };\n  const {\n    customPages,\n    customPagesPortals\n  } = useUserProfileCustomPages(props.children);\n  return /* @__PURE__ */React8.createElement(React8.Fragment, null, shouldShowFallback && fallback, /* @__PURE__ */React8.createElement(ClerkHostRenderer, {\n    component,\n    mount: clerk.mountUserProfile,\n    unmount: clerk.unmountUserProfile,\n    updateProps: clerk.__unstable__updateProps,\n    props: {\n      ...props,\n      customPages\n    },\n    rootProps: rendererRootProps\n  }, /* @__PURE__ */React8.createElement(CustomPortalsRenderer, {\n    customPagesPortals\n  })));\n}, {\n  component: \"UserProfile\",\n  renderWhileLoading: true\n});\nvar UserProfile = Object.assign(_UserProfile, {\n  Page: UserProfilePage,\n  Link: UserProfileLink\n});\nvar UserButtonContext = createContext({\n  mount: () => {},\n  unmount: () => {},\n  updateProps: () => {}\n});\nvar _UserButton = withClerk(_ref8 => {\n  let {\n    clerk,\n    component,\n    fallback,\n    ...props\n  } = _ref8;\n  const mountingStatus = useWaitForComponentMount(component);\n  const shouldShowFallback = mountingStatus === \"rendering\" || !clerk.loaded;\n  const rendererRootProps = {\n    ...(shouldShowFallback && fallback && {\n      style: {\n        display: \"none\"\n      }\n    })\n  };\n  const {\n    customPages,\n    customPagesPortals\n  } = useUserProfileCustomPages(props.children, {\n    allowForAnyChildren: !!props.__experimental_asProvider\n  });\n  const userProfileProps = Object.assign(props.userProfileProps || {}, {\n    customPages\n  });\n  const {\n    customMenuItems,\n    customMenuItemsPortals\n  } = useUserButtonCustomMenuItems(props.children);\n  const sanitizedChildren = useSanitizedChildren(props.children);\n  const passableProps = {\n    mount: clerk.mountUserButton,\n    unmount: clerk.unmountUserButton,\n    updateProps: clerk.__unstable__updateProps,\n    props: {\n      ...props,\n      userProfileProps,\n      customMenuItems\n    }\n  };\n  const portalProps = {\n    customPagesPortals,\n    customMenuItemsPortals\n  };\n  return /* @__PURE__ */React8.createElement(UserButtonContext.Provider, {\n    value: passableProps\n  }, shouldShowFallback && fallback, clerk.loaded && /* @__PURE__ */React8.createElement(ClerkHostRenderer, {\n    component,\n    ...passableProps,\n    hideRootHtmlElement: !!props.__experimental_asProvider,\n    rootProps: rendererRootProps\n  }, props.__experimental_asProvider ? sanitizedChildren : null, /* @__PURE__ */React8.createElement(CustomPortalsRenderer, {\n    ...portalProps\n  })));\n}, {\n  component: \"UserButton\",\n  renderWhileLoading: true\n});\nfunction MenuItems(_ref9) {\n  let {\n    children\n  } = _ref9;\n  logErrorInDevMode3(userButtonMenuItemsRenderedError);\n  return /* @__PURE__ */React8.createElement(React8.Fragment, null, children);\n}\nfunction MenuAction(_ref0) {\n  let {\n    children\n  } = _ref0;\n  logErrorInDevMode3(userButtonMenuActionRenderedError);\n  return /* @__PURE__ */React8.createElement(React8.Fragment, null, children);\n}\nfunction MenuLink(_ref1) {\n  let {\n    children\n  } = _ref1;\n  logErrorInDevMode3(userButtonMenuLinkRenderedError);\n  return /* @__PURE__ */React8.createElement(React8.Fragment, null, children);\n}\nfunction UserButtonOutlet(outletProps) {\n  const providerProps = useContext(UserButtonContext);\n  const portalProps = {\n    ...providerProps,\n    props: {\n      ...providerProps.props,\n      ...outletProps\n    }\n  };\n  return /* @__PURE__ */React8.createElement(ClerkHostRenderer, {\n    ...portalProps\n  });\n}\nvar UserButton = Object.assign(_UserButton, {\n  UserProfilePage,\n  UserProfileLink,\n  MenuItems,\n  Action: MenuAction,\n  Link: MenuLink,\n  __experimental_Outlet: UserButtonOutlet\n});\nfunction OrganizationProfilePage(_ref10) {\n  let {\n    children\n  } = _ref10;\n  logErrorInDevMode3(organizationProfilePageRenderedError);\n  return /* @__PURE__ */React8.createElement(React8.Fragment, null, children);\n}\nfunction OrganizationProfileLink(_ref11) {\n  let {\n    children\n  } = _ref11;\n  logErrorInDevMode3(organizationProfileLinkRenderedError);\n  return /* @__PURE__ */React8.createElement(React8.Fragment, null, children);\n}\nvar _OrganizationProfile = withClerk(_ref12 => {\n  let {\n    clerk,\n    component,\n    fallback,\n    ...props\n  } = _ref12;\n  const mountingStatus = useWaitForComponentMount(component);\n  const shouldShowFallback = mountingStatus === \"rendering\" || !clerk.loaded;\n  const rendererRootProps = {\n    ...(shouldShowFallback && fallback && {\n      style: {\n        display: \"none\"\n      }\n    })\n  };\n  const {\n    customPages,\n    customPagesPortals\n  } = useOrganizationProfileCustomPages(props.children);\n  return /* @__PURE__ */React8.createElement(React8.Fragment, null, shouldShowFallback && fallback, clerk.loaded && /* @__PURE__ */React8.createElement(ClerkHostRenderer, {\n    component,\n    mount: clerk.mountOrganizationProfile,\n    unmount: clerk.unmountOrganizationProfile,\n    updateProps: clerk.__unstable__updateProps,\n    props: {\n      ...props,\n      customPages\n    },\n    rootProps: rendererRootProps\n  }, /* @__PURE__ */React8.createElement(CustomPortalsRenderer, {\n    customPagesPortals\n  })));\n}, {\n  component: \"OrganizationProfile\",\n  renderWhileLoading: true\n});\nvar OrganizationProfile = Object.assign(_OrganizationProfile, {\n  Page: OrganizationProfilePage,\n  Link: OrganizationProfileLink\n});\nvar CreateOrganization = withClerk(_ref13 => {\n  let {\n    clerk,\n    component,\n    fallback,\n    ...props\n  } = _ref13;\n  const mountingStatus = useWaitForComponentMount(component);\n  const shouldShowFallback = mountingStatus === \"rendering\" || !clerk.loaded;\n  const rendererRootProps = {\n    ...(shouldShowFallback && fallback && {\n      style: {\n        display: \"none\"\n      }\n    })\n  };\n  return /* @__PURE__ */React8.createElement(React8.Fragment, null, shouldShowFallback && fallback, clerk.loaded && /* @__PURE__ */React8.createElement(ClerkHostRenderer, {\n    component,\n    mount: clerk.mountCreateOrganization,\n    unmount: clerk.unmountCreateOrganization,\n    updateProps: clerk.__unstable__updateProps,\n    props,\n    rootProps: rendererRootProps\n  }));\n}, {\n  component: \"CreateOrganization\",\n  renderWhileLoading: true\n});\nvar OrganizationSwitcherContext = createContext({\n  mount: () => {},\n  unmount: () => {},\n  updateProps: () => {}\n});\nvar _OrganizationSwitcher = withClerk(_ref14 => {\n  let {\n    clerk,\n    component,\n    fallback,\n    ...props\n  } = _ref14;\n  const mountingStatus = useWaitForComponentMount(component);\n  const shouldShowFallback = mountingStatus === \"rendering\" || !clerk.loaded;\n  const rendererRootProps = {\n    ...(shouldShowFallback && fallback && {\n      style: {\n        display: \"none\"\n      }\n    })\n  };\n  const {\n    customPages,\n    customPagesPortals\n  } = useOrganizationProfileCustomPages(props.children, {\n    allowForAnyChildren: !!props.__experimental_asProvider\n  });\n  const organizationProfileProps = Object.assign(props.organizationProfileProps || {}, {\n    customPages\n  });\n  const sanitizedChildren = useSanitizedChildren(props.children);\n  const passableProps = {\n    mount: clerk.mountOrganizationSwitcher,\n    unmount: clerk.unmountOrganizationSwitcher,\n    updateProps: clerk.__unstable__updateProps,\n    props: {\n      ...props,\n      organizationProfileProps\n    },\n    rootProps: rendererRootProps,\n    component\n  };\n  clerk.__experimental_prefetchOrganizationSwitcher();\n  return /* @__PURE__ */React8.createElement(OrganizationSwitcherContext.Provider, {\n    value: passableProps\n  }, /* @__PURE__ */React8.createElement(React8.Fragment, null, shouldShowFallback && fallback, clerk.loaded && /* @__PURE__ */React8.createElement(ClerkHostRenderer, {\n    ...passableProps,\n    hideRootHtmlElement: !!props.__experimental_asProvider\n  }, props.__experimental_asProvider ? sanitizedChildren : null, /* @__PURE__ */React8.createElement(CustomPortalsRenderer, {\n    customPagesPortals\n  }))));\n}, {\n  component: \"OrganizationSwitcher\",\n  renderWhileLoading: true\n});\nfunction OrganizationSwitcherOutlet(outletProps) {\n  const providerProps = useContext(OrganizationSwitcherContext);\n  const portalProps = {\n    ...providerProps,\n    props: {\n      ...providerProps.props,\n      ...outletProps\n    }\n  };\n  return /* @__PURE__ */React8.createElement(ClerkHostRenderer, {\n    ...portalProps\n  });\n}\nvar OrganizationSwitcher = Object.assign(_OrganizationSwitcher, {\n  OrganizationProfilePage,\n  OrganizationProfileLink,\n  __experimental_Outlet: OrganizationSwitcherOutlet\n});\nvar OrganizationList = withClerk(_ref15 => {\n  let {\n    clerk,\n    component,\n    fallback,\n    ...props\n  } = _ref15;\n  const mountingStatus = useWaitForComponentMount(component);\n  const shouldShowFallback = mountingStatus === \"rendering\" || !clerk.loaded;\n  const rendererRootProps = {\n    ...(shouldShowFallback && fallback && {\n      style: {\n        display: \"none\"\n      }\n    })\n  };\n  return /* @__PURE__ */React8.createElement(React8.Fragment, null, shouldShowFallback && fallback, clerk.loaded && /* @__PURE__ */React8.createElement(ClerkHostRenderer, {\n    component,\n    mount: clerk.mountOrganizationList,\n    unmount: clerk.unmountOrganizationList,\n    updateProps: clerk.__unstable__updateProps,\n    props,\n    rootProps: rendererRootProps\n  }));\n}, {\n  component: \"OrganizationList\",\n  renderWhileLoading: true\n});\nvar GoogleOneTap = withClerk(_ref16 => {\n  let {\n    clerk,\n    component,\n    fallback,\n    ...props\n  } = _ref16;\n  const mountingStatus = useWaitForComponentMount(component);\n  const shouldShowFallback = mountingStatus === \"rendering\" || !clerk.loaded;\n  const rendererRootProps = {\n    ...(shouldShowFallback && fallback && {\n      style: {\n        display: \"none\"\n      }\n    })\n  };\n  return /* @__PURE__ */React8.createElement(React8.Fragment, null, shouldShowFallback && fallback, clerk.loaded && /* @__PURE__ */React8.createElement(ClerkHostRenderer, {\n    component,\n    open: clerk.openGoogleOneTap,\n    close: clerk.closeGoogleOneTap,\n    updateProps: clerk.__unstable__updateProps,\n    props,\n    rootProps: rendererRootProps\n  }));\n}, {\n  component: \"GoogleOneTap\",\n  renderWhileLoading: true\n});\nvar Waitlist = withClerk(_ref17 => {\n  let {\n    clerk,\n    component,\n    fallback,\n    ...props\n  } = _ref17;\n  const mountingStatus = useWaitForComponentMount(component);\n  const shouldShowFallback = mountingStatus === \"rendering\" || !clerk.loaded;\n  const rendererRootProps = {\n    ...(shouldShowFallback && fallback && {\n      style: {\n        display: \"none\"\n      }\n    })\n  };\n  return /* @__PURE__ */React8.createElement(React8.Fragment, null, shouldShowFallback && fallback, clerk.loaded && /* @__PURE__ */React8.createElement(ClerkHostRenderer, {\n    component,\n    mount: clerk.mountWaitlist,\n    unmount: clerk.unmountWaitlist,\n    updateProps: clerk.__unstable__updateProps,\n    props,\n    rootProps: rendererRootProps\n  }));\n}, {\n  component: \"Waitlist\",\n  renderWhileLoading: true\n});\nvar PricingTable = withClerk(_ref18 => {\n  let {\n    clerk,\n    component,\n    fallback,\n    ...props\n  } = _ref18;\n  const mountingStatus = useWaitForComponentMount(component);\n  const shouldShowFallback = mountingStatus === \"rendering\" || !clerk.loaded;\n  const rendererRootProps = {\n    ...(shouldShowFallback && fallback && {\n      style: {\n        display: \"none\"\n      }\n    })\n  };\n  return /* @__PURE__ */React8.createElement(React8.Fragment, null, shouldShowFallback && fallback, clerk.loaded && /* @__PURE__ */React8.createElement(ClerkHostRenderer, {\n    component,\n    mount: clerk.mountPricingTable,\n    unmount: clerk.unmountPricingTable,\n    updateProps: clerk.__unstable__updateProps,\n    props,\n    rootProps: rendererRootProps\n  }));\n}, {\n  component: \"PricingTable\",\n  renderWhileLoading: true\n});\nvar APIKeys = withClerk(_ref19 => {\n  let {\n    clerk,\n    component,\n    fallback,\n    ...props\n  } = _ref19;\n  const mountingStatus = useWaitForComponentMount(component);\n  const shouldShowFallback = mountingStatus === \"rendering\" || !clerk.loaded;\n  const rendererRootProps = {\n    ...(shouldShowFallback && fallback && {\n      style: {\n        display: \"none\"\n      }\n    })\n  };\n  return /* @__PURE__ */React8.createElement(React8.Fragment, null, shouldShowFallback && fallback, clerk.loaded && /* @__PURE__ */React8.createElement(ClerkHostRenderer, {\n    component,\n    mount: clerk.mountApiKeys,\n    unmount: clerk.unmountApiKeys,\n    updateProps: clerk.__unstable__updateProps,\n    props,\n    rootProps: rendererRootProps\n  }));\n}, {\n  component: \"ApiKeys\",\n  renderWhileLoading: true\n});\n\n// src/components/SignInButton.tsx\nimport React9 from \"react\";\nvar SignInButton = withClerk(_ref20 => {\n  let {\n    clerk,\n    children,\n    ...props\n  } = _ref20;\n  const {\n    signUpFallbackRedirectUrl,\n    forceRedirectUrl,\n    fallbackRedirectUrl,\n    signUpForceRedirectUrl,\n    mode,\n    initialValues,\n    withSignUp,\n    oauthFlow,\n    ...rest\n  } = props;\n  children = normalizeWithDefaultValue(children, \"Sign in\");\n  const child = assertSingleChild(children)(\"SignInButton\");\n  const clickHandler = () => {\n    const opts = {\n      forceRedirectUrl,\n      fallbackRedirectUrl,\n      signUpFallbackRedirectUrl,\n      signUpForceRedirectUrl,\n      initialValues,\n      withSignUp,\n      oauthFlow\n    };\n    if (mode === \"modal\") {\n      return clerk.openSignIn({\n        ...opts,\n        appearance: props.appearance\n      });\n    }\n    return clerk.redirectToSignIn({\n      ...opts,\n      signInFallbackRedirectUrl: fallbackRedirectUrl,\n      signInForceRedirectUrl: forceRedirectUrl\n    });\n  };\n  const wrappedChildClickHandler = async e => {\n    if (child && typeof child === \"object\" && \"props\" in child) {\n      await safeExecute(child.props.onClick)(e);\n    }\n    return clickHandler();\n  };\n  const childProps = {\n    ...rest,\n    onClick: wrappedChildClickHandler\n  };\n  return React9.cloneElement(child, childProps);\n}, {\n  component: \"SignInButton\",\n  renderWhileLoading: true\n});\n\n// src/components/SignUpButton.tsx\nimport React10 from \"react\";\nvar SignUpButton = withClerk(_ref21 => {\n  let {\n    clerk,\n    children,\n    ...props\n  } = _ref21;\n  const {\n    fallbackRedirectUrl,\n    forceRedirectUrl,\n    signInFallbackRedirectUrl,\n    signInForceRedirectUrl,\n    mode,\n    initialValues,\n    oauthFlow,\n    ...rest\n  } = props;\n  children = normalizeWithDefaultValue(children, \"Sign up\");\n  const child = assertSingleChild(children)(\"SignUpButton\");\n  const clickHandler = () => {\n    const opts = {\n      fallbackRedirectUrl,\n      forceRedirectUrl,\n      signInFallbackRedirectUrl,\n      signInForceRedirectUrl,\n      initialValues,\n      oauthFlow\n    };\n    if (mode === \"modal\") {\n      return clerk.openSignUp({\n        ...opts,\n        appearance: props.appearance,\n        unsafeMetadata: props.unsafeMetadata\n      });\n    }\n    return clerk.redirectToSignUp({\n      ...opts,\n      signUpFallbackRedirectUrl: fallbackRedirectUrl,\n      signUpForceRedirectUrl: forceRedirectUrl\n    });\n  };\n  const wrappedChildClickHandler = async e => {\n    if (child && typeof child === \"object\" && \"props\" in child) {\n      await safeExecute(child.props.onClick)(e);\n    }\n    return clickHandler();\n  };\n  const childProps = {\n    ...rest,\n    onClick: wrappedChildClickHandler\n  };\n  return React10.cloneElement(child, childProps);\n}, {\n  component: \"SignUpButton\",\n  renderWhileLoading: true\n});\n\n// src/components/SignOutButton.tsx\nimport React11 from \"react\";\nvar SignOutButton = withClerk(_ref22 => {\n  let {\n    clerk,\n    children,\n    ...props\n  } = _ref22;\n  const {\n    redirectUrl = \"/\",\n    signOutOptions,\n    ...rest\n  } = props;\n  children = normalizeWithDefaultValue(children, \"Sign out\");\n  const child = assertSingleChild(children)(\"SignOutButton\");\n  const clickHandler = () => clerk.signOut({\n    redirectUrl,\n    ...signOutOptions\n  });\n  const wrappedChildClickHandler = async e => {\n    await safeExecute(child.props.onClick)(e);\n    return clickHandler();\n  };\n  const childProps = {\n    ...rest,\n    onClick: wrappedChildClickHandler\n  };\n  return React11.cloneElement(child, childProps);\n}, {\n  component: \"SignOutButton\",\n  renderWhileLoading: true\n});\n\n// src/components/SignInWithMetamaskButton.tsx\nimport React12 from \"react\";\nvar SignInWithMetamaskButton = withClerk(_ref23 => {\n  let {\n    clerk,\n    children,\n    ...props\n  } = _ref23;\n  const {\n    redirectUrl,\n    ...rest\n  } = props;\n  children = normalizeWithDefaultValue(children, \"Sign in with Metamask\");\n  const child = assertSingleChild(children)(\"SignInWithMetamaskButton\");\n  const clickHandler = async () => {\n    async function authenticate() {\n      await clerk.authenticateWithMetamask({\n        redirectUrl: redirectUrl || void 0\n      });\n    }\n    void authenticate();\n  };\n  const wrappedChildClickHandler = async e => {\n    await safeExecute(child.props.onClick)(e);\n    return clickHandler();\n  };\n  const childProps = {\n    ...rest,\n    onClick: wrappedChildClickHandler\n  };\n  return React12.cloneElement(child, childProps);\n}, {\n  component: \"SignInWithMetamask\",\n  renderWhileLoading: true\n});\n\n// src/contexts/ClerkProvider.tsx\nimport { isPublishableKey } from \"@clerk/shared/keys\";\nimport React14 from \"react\";\n\n// src/contexts/ClerkContextProvider.tsx\nimport { deriveState } from \"@clerk/shared/deriveState\";\nimport { __experimental_CheckoutProvider as CheckoutProvider, ClientContext, OrganizationProvider, SessionContext, UserContext } from \"@clerk/shared/react\";\nimport React13 from \"react\";\n\n// src/isomorphicClerk.ts\nimport { inBrowser } from \"@clerk/shared/browser\";\nimport { clerkEvents, createClerkEventBus } from \"@clerk/shared/clerkEventBus\";\nimport { loadClerkJsScript } from \"@clerk/shared/loadClerkJsScript\";\nimport { handleValueOrFn } from \"@clerk/shared/utils\";\nif (typeof globalThis.__BUILD_DISABLE_RHC__ === \"undefined\") {\n  globalThis.__BUILD_DISABLE_RHC__ = false;\n}\nvar SDK_METADATA = {\n  name: \"@clerk/clerk-react\",\n  version: \"5.35.3\",\n  environment: process.env.NODE_ENV\n};\nvar _status, _domain, _proxyUrl, _publishableKey, _eventBus, _instance, _IsomorphicClerk_instances, waitForClerkJS_fn;\nvar _IsomorphicClerk = class _IsomorphicClerk {\n  constructor(options) {\n    var _this = this;\n    __privateAdd(this, _IsomorphicClerk_instances);\n    this.clerkjs = null;\n    this.preopenOneTap = null;\n    this.preopenUserVerification = null;\n    this.preopenSignIn = null;\n    this.preopenCheckout = null;\n    this.preopenPlanDetails = null;\n    this.preopenSubscriptionDetails = null;\n    this.preopenSignUp = null;\n    this.preopenUserProfile = null;\n    this.preopenOrganizationProfile = null;\n    this.preopenCreateOrganization = null;\n    this.preOpenWaitlist = null;\n    this.premountSignInNodes = /* @__PURE__ */new Map();\n    this.premountSignUpNodes = /* @__PURE__ */new Map();\n    this.premountUserProfileNodes = /* @__PURE__ */new Map();\n    this.premountUserButtonNodes = /* @__PURE__ */new Map();\n    this.premountOrganizationProfileNodes = /* @__PURE__ */new Map();\n    this.premountCreateOrganizationNodes = /* @__PURE__ */new Map();\n    this.premountOrganizationSwitcherNodes = /* @__PURE__ */new Map();\n    this.premountOrganizationListNodes = /* @__PURE__ */new Map();\n    this.premountMethodCalls = /* @__PURE__ */new Map();\n    this.premountWaitlistNodes = /* @__PURE__ */new Map();\n    this.premountPricingTableNodes = /* @__PURE__ */new Map();\n    this.premountApiKeysNodes = /* @__PURE__ */new Map();\n    this.premountOAuthConsentNodes = /* @__PURE__ */new Map();\n    // A separate Map of `addListener` method calls to handle multiple listeners.\n    this.premountAddListenerCalls = /* @__PURE__ */new Map();\n    this.loadedListeners = [];\n    __privateAdd(this, _status, \"loading\");\n    __privateAdd(this, _domain);\n    __privateAdd(this, _proxyUrl);\n    __privateAdd(this, _publishableKey);\n    __privateAdd(this, _eventBus, createClerkEventBus());\n    this.buildSignInUrl = opts => {\n      const callback = () => {\n        var _a;\n        return ((_a = this.clerkjs) == null ? void 0 : _a.buildSignInUrl(opts)) || \"\";\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"buildSignInUrl\", callback);\n      }\n    };\n    this.buildSignUpUrl = opts => {\n      const callback = () => {\n        var _a;\n        return ((_a = this.clerkjs) == null ? void 0 : _a.buildSignUpUrl(opts)) || \"\";\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"buildSignUpUrl\", callback);\n      }\n    };\n    this.buildAfterSignInUrl = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      const callback = () => {\n        var _a;\n        return ((_a = _this.clerkjs) == null ? void 0 : _a.buildAfterSignInUrl(...args)) || \"\";\n      };\n      if (_this.clerkjs && _this.loaded) {\n        return callback();\n      } else {\n        _this.premountMethodCalls.set(\"buildAfterSignInUrl\", callback);\n      }\n    };\n    this.buildAfterSignUpUrl = function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      const callback = () => {\n        var _a;\n        return ((_a = _this.clerkjs) == null ? void 0 : _a.buildAfterSignUpUrl(...args)) || \"\";\n      };\n      if (_this.clerkjs && _this.loaded) {\n        return callback();\n      } else {\n        _this.premountMethodCalls.set(\"buildAfterSignUpUrl\", callback);\n      }\n    };\n    this.buildAfterSignOutUrl = () => {\n      const callback = () => {\n        var _a;\n        return ((_a = this.clerkjs) == null ? void 0 : _a.buildAfterSignOutUrl()) || \"\";\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"buildAfterSignOutUrl\", callback);\n      }\n    };\n    this.buildNewSubscriptionRedirectUrl = () => {\n      const callback = () => {\n        var _a;\n        return ((_a = this.clerkjs) == null ? void 0 : _a.buildNewSubscriptionRedirectUrl()) || \"\";\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"buildNewSubscriptionRedirectUrl\", callback);\n      }\n    };\n    this.buildAfterMultiSessionSingleSignOutUrl = () => {\n      const callback = () => {\n        var _a;\n        return ((_a = this.clerkjs) == null ? void 0 : _a.buildAfterMultiSessionSingleSignOutUrl()) || \"\";\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"buildAfterMultiSessionSingleSignOutUrl\", callback);\n      }\n    };\n    this.buildUserProfileUrl = () => {\n      const callback = () => {\n        var _a;\n        return ((_a = this.clerkjs) == null ? void 0 : _a.buildUserProfileUrl()) || \"\";\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"buildUserProfileUrl\", callback);\n      }\n    };\n    this.buildCreateOrganizationUrl = () => {\n      const callback = () => {\n        var _a;\n        return ((_a = this.clerkjs) == null ? void 0 : _a.buildCreateOrganizationUrl()) || \"\";\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"buildCreateOrganizationUrl\", callback);\n      }\n    };\n    this.buildOrganizationProfileUrl = () => {\n      const callback = () => {\n        var _a;\n        return ((_a = this.clerkjs) == null ? void 0 : _a.buildOrganizationProfileUrl()) || \"\";\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"buildOrganizationProfileUrl\", callback);\n      }\n    };\n    this.buildWaitlistUrl = () => {\n      const callback = () => {\n        var _a;\n        return ((_a = this.clerkjs) == null ? void 0 : _a.buildWaitlistUrl()) || \"\";\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"buildWaitlistUrl\", callback);\n      }\n    };\n    this.buildUrlWithAuth = to => {\n      const callback = () => {\n        var _a;\n        return ((_a = this.clerkjs) == null ? void 0 : _a.buildUrlWithAuth(to)) || \"\";\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"buildUrlWithAuth\", callback);\n      }\n    };\n    this.handleUnauthenticated = async () => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.handleUnauthenticated();\n      };\n      if (this.clerkjs && this.loaded) {\n        void callback();\n      } else {\n        this.premountMethodCalls.set(\"handleUnauthenticated\", callback);\n      }\n    };\n    this.on = function () {\n      var _a;\n      if ((_a = _this.clerkjs) == null ? void 0 : _a.on) {\n        return _this.clerkjs.on(...arguments);\n      } else {\n        __privateGet(_this, _eventBus).on(...arguments);\n      }\n    };\n    this.off = function () {\n      var _a;\n      if ((_a = _this.clerkjs) == null ? void 0 : _a.off) {\n        return _this.clerkjs.off(...arguments);\n      } else {\n        __privateGet(_this, _eventBus).off(...arguments);\n      }\n    };\n    /**\n     * @deprecated Please use `addStatusListener`. This api will be removed in the next major.\n     */\n    this.addOnLoaded = cb => {\n      this.loadedListeners.push(cb);\n      if (this.loaded) {\n        this.emitLoaded();\n      }\n    };\n    /**\n     * @deprecated Please use `__internal_setStatus`. This api will be removed in the next major.\n     */\n    this.emitLoaded = () => {\n      this.loadedListeners.forEach(cb => cb());\n      this.loadedListeners = [];\n    };\n    this.beforeLoad = clerkjs => {\n      if (!clerkjs) {\n        throw new Error(\"Failed to hydrate latest Clerk JS\");\n      }\n    };\n    this.hydrateClerkJS = clerkjs => {\n      var _a;\n      if (!clerkjs) {\n        throw new Error(\"Failed to hydrate latest Clerk JS\");\n      }\n      this.clerkjs = clerkjs;\n      this.premountMethodCalls.forEach(cb => cb());\n      this.premountAddListenerCalls.forEach((listenerHandlers, listener) => {\n        listenerHandlers.nativeUnsubscribe = clerkjs.addListener(listener);\n      });\n      (_a = __privateGet(this, _eventBus).internal.retrieveListeners(\"status\")) == null ? void 0 : _a.forEach(listener => {\n        this.on(\"status\", listener, {\n          notify: true\n        });\n      });\n      if (this.preopenSignIn !== null) {\n        clerkjs.openSignIn(this.preopenSignIn);\n      }\n      if (this.preopenCheckout !== null) {\n        clerkjs.__internal_openCheckout(this.preopenCheckout);\n      }\n      if (this.preopenPlanDetails !== null) {\n        clerkjs.__internal_openPlanDetails(this.preopenPlanDetails);\n      }\n      if (this.preopenSubscriptionDetails !== null) {\n        clerkjs.__internal_openSubscriptionDetails(this.preopenSubscriptionDetails);\n      }\n      if (this.preopenSignUp !== null) {\n        clerkjs.openSignUp(this.preopenSignUp);\n      }\n      if (this.preopenUserProfile !== null) {\n        clerkjs.openUserProfile(this.preopenUserProfile);\n      }\n      if (this.preopenUserVerification !== null) {\n        clerkjs.__internal_openReverification(this.preopenUserVerification);\n      }\n      if (this.preopenOneTap !== null) {\n        clerkjs.openGoogleOneTap(this.preopenOneTap);\n      }\n      if (this.preopenOrganizationProfile !== null) {\n        clerkjs.openOrganizationProfile(this.preopenOrganizationProfile);\n      }\n      if (this.preopenCreateOrganization !== null) {\n        clerkjs.openCreateOrganization(this.preopenCreateOrganization);\n      }\n      if (this.preOpenWaitlist !== null) {\n        clerkjs.openWaitlist(this.preOpenWaitlist);\n      }\n      this.premountSignInNodes.forEach((props, node) => {\n        clerkjs.mountSignIn(node, props);\n      });\n      this.premountSignUpNodes.forEach((props, node) => {\n        clerkjs.mountSignUp(node, props);\n      });\n      this.premountUserProfileNodes.forEach((props, node) => {\n        clerkjs.mountUserProfile(node, props);\n      });\n      this.premountUserButtonNodes.forEach((props, node) => {\n        clerkjs.mountUserButton(node, props);\n      });\n      this.premountOrganizationListNodes.forEach((props, node) => {\n        clerkjs.mountOrganizationList(node, props);\n      });\n      this.premountWaitlistNodes.forEach((props, node) => {\n        clerkjs.mountWaitlist(node, props);\n      });\n      this.premountPricingTableNodes.forEach((props, node) => {\n        clerkjs.mountPricingTable(node, props);\n      });\n      this.premountApiKeysNodes.forEach((props, node) => {\n        clerkjs.mountApiKeys(node, props);\n      });\n      this.premountOAuthConsentNodes.forEach((props, node) => {\n        clerkjs.__internal_mountOAuthConsent(node, props);\n      });\n      if (typeof this.clerkjs.status === \"undefined\") {\n        __privateGet(this, _eventBus).emit(clerkEvents.Status, \"ready\");\n      }\n      this.emitLoaded();\n      return this.clerkjs;\n    };\n    this.__experimental_checkout = function () {\n      var _a;\n      return (_a = _this.clerkjs) == null ? void 0 : _a.__experimental_checkout(...arguments);\n    };\n    this.__unstable__updateProps = async props => {\n      const clerkjs = await __privateMethod(this, _IsomorphicClerk_instances, waitForClerkJS_fn).call(this);\n      if (clerkjs && \"__unstable__updateProps\" in clerkjs) {\n        return clerkjs.__unstable__updateProps(props);\n      }\n    };\n    this.__internal_navigateToTaskIfAvailable = async params => {\n      if (this.clerkjs) {\n        return this.clerkjs.__internal_navigateToTaskIfAvailable(params);\n      } else {\n        return Promise.reject();\n      }\n    };\n    /**\n     * `setActive` can be used to set the active session and/or organization.\n     */\n    this.setActive = params => {\n      if (this.clerkjs) {\n        return this.clerkjs.setActive(params);\n      } else {\n        return Promise.reject();\n      }\n    };\n    this.openSignIn = props => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.openSignIn(props);\n      } else {\n        this.preopenSignIn = props;\n      }\n    };\n    this.closeSignIn = () => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.closeSignIn();\n      } else {\n        this.preopenSignIn = null;\n      }\n    };\n    this.__internal_openCheckout = props => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.__internal_openCheckout(props);\n      } else {\n        this.preopenCheckout = props;\n      }\n    };\n    this.__internal_closeCheckout = () => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.__internal_closeCheckout();\n      } else {\n        this.preopenCheckout = null;\n      }\n    };\n    this.__internal_openPlanDetails = props => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.__internal_openPlanDetails(props);\n      } else {\n        this.preopenPlanDetails = props;\n      }\n    };\n    this.__internal_closePlanDetails = () => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.__internal_closePlanDetails();\n      } else {\n        this.preopenPlanDetails = null;\n      }\n    };\n    this.__internal_openSubscriptionDetails = props => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.__internal_openSubscriptionDetails(props);\n      } else {\n        this.preopenSubscriptionDetails = props != null ? props : null;\n      }\n    };\n    this.__internal_closeSubscriptionDetails = () => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.__internal_closeSubscriptionDetails();\n      } else {\n        this.preopenSubscriptionDetails = null;\n      }\n    };\n    this.__internal_openReverification = props => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.__internal_openReverification(props);\n      } else {\n        this.preopenUserVerification = props;\n      }\n    };\n    this.__internal_closeReverification = () => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.__internal_closeReverification();\n      } else {\n        this.preopenUserVerification = null;\n      }\n    };\n    this.openGoogleOneTap = props => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.openGoogleOneTap(props);\n      } else {\n        this.preopenOneTap = props;\n      }\n    };\n    this.closeGoogleOneTap = () => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.closeGoogleOneTap();\n      } else {\n        this.preopenOneTap = null;\n      }\n    };\n    this.openUserProfile = props => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.openUserProfile(props);\n      } else {\n        this.preopenUserProfile = props;\n      }\n    };\n    this.closeUserProfile = () => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.closeUserProfile();\n      } else {\n        this.preopenUserProfile = null;\n      }\n    };\n    this.openOrganizationProfile = props => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.openOrganizationProfile(props);\n      } else {\n        this.preopenOrganizationProfile = props;\n      }\n    };\n    this.closeOrganizationProfile = () => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.closeOrganizationProfile();\n      } else {\n        this.preopenOrganizationProfile = null;\n      }\n    };\n    this.openCreateOrganization = props => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.openCreateOrganization(props);\n      } else {\n        this.preopenCreateOrganization = props;\n      }\n    };\n    this.closeCreateOrganization = () => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.closeCreateOrganization();\n      } else {\n        this.preopenCreateOrganization = null;\n      }\n    };\n    this.openWaitlist = props => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.openWaitlist(props);\n      } else {\n        this.preOpenWaitlist = props;\n      }\n    };\n    this.closeWaitlist = () => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.closeWaitlist();\n      } else {\n        this.preOpenWaitlist = null;\n      }\n    };\n    this.openSignUp = props => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.openSignUp(props);\n      } else {\n        this.preopenSignUp = props;\n      }\n    };\n    this.closeSignUp = () => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.closeSignUp();\n      } else {\n        this.preopenSignUp = null;\n      }\n    };\n    this.mountSignIn = (node, props) => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.mountSignIn(node, props);\n      } else {\n        this.premountSignInNodes.set(node, props);\n      }\n    };\n    this.unmountSignIn = node => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.unmountSignIn(node);\n      } else {\n        this.premountSignInNodes.delete(node);\n      }\n    };\n    this.mountSignUp = (node, props) => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.mountSignUp(node, props);\n      } else {\n        this.premountSignUpNodes.set(node, props);\n      }\n    };\n    this.unmountSignUp = node => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.unmountSignUp(node);\n      } else {\n        this.premountSignUpNodes.delete(node);\n      }\n    };\n    this.mountUserProfile = (node, props) => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.mountUserProfile(node, props);\n      } else {\n        this.premountUserProfileNodes.set(node, props);\n      }\n    };\n    this.unmountUserProfile = node => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.unmountUserProfile(node);\n      } else {\n        this.premountUserProfileNodes.delete(node);\n      }\n    };\n    this.mountOrganizationProfile = (node, props) => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.mountOrganizationProfile(node, props);\n      } else {\n        this.premountOrganizationProfileNodes.set(node, props);\n      }\n    };\n    this.unmountOrganizationProfile = node => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.unmountOrganizationProfile(node);\n      } else {\n        this.premountOrganizationProfileNodes.delete(node);\n      }\n    };\n    this.mountCreateOrganization = (node, props) => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.mountCreateOrganization(node, props);\n      } else {\n        this.premountCreateOrganizationNodes.set(node, props);\n      }\n    };\n    this.unmountCreateOrganization = node => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.unmountCreateOrganization(node);\n      } else {\n        this.premountCreateOrganizationNodes.delete(node);\n      }\n    };\n    this.mountOrganizationSwitcher = (node, props) => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.mountOrganizationSwitcher(node, props);\n      } else {\n        this.premountOrganizationSwitcherNodes.set(node, props);\n      }\n    };\n    this.unmountOrganizationSwitcher = node => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.unmountOrganizationSwitcher(node);\n      } else {\n        this.premountOrganizationSwitcherNodes.delete(node);\n      }\n    };\n    this.__experimental_prefetchOrganizationSwitcher = () => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.__experimental_prefetchOrganizationSwitcher();\n      };\n      if (this.clerkjs && this.loaded) {\n        void callback();\n      } else {\n        this.premountMethodCalls.set(\"__experimental_prefetchOrganizationSwitcher\", callback);\n      }\n    };\n    this.mountOrganizationList = (node, props) => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.mountOrganizationList(node, props);\n      } else {\n        this.premountOrganizationListNodes.set(node, props);\n      }\n    };\n    this.unmountOrganizationList = node => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.unmountOrganizationList(node);\n      } else {\n        this.premountOrganizationListNodes.delete(node);\n      }\n    };\n    this.mountUserButton = (node, userButtonProps) => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.mountUserButton(node, userButtonProps);\n      } else {\n        this.premountUserButtonNodes.set(node, userButtonProps);\n      }\n    };\n    this.unmountUserButton = node => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.unmountUserButton(node);\n      } else {\n        this.premountUserButtonNodes.delete(node);\n      }\n    };\n    this.mountWaitlist = (node, props) => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.mountWaitlist(node, props);\n      } else {\n        this.premountWaitlistNodes.set(node, props);\n      }\n    };\n    this.unmountWaitlist = node => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.unmountWaitlist(node);\n      } else {\n        this.premountWaitlistNodes.delete(node);\n      }\n    };\n    this.mountPricingTable = (node, props) => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.mountPricingTable(node, props);\n      } else {\n        this.premountPricingTableNodes.set(node, props);\n      }\n    };\n    this.unmountPricingTable = node => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.unmountPricingTable(node);\n      } else {\n        this.premountPricingTableNodes.delete(node);\n      }\n    };\n    this.mountApiKeys = (node, props) => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.mountApiKeys(node, props);\n      } else {\n        this.premountApiKeysNodes.set(node, props);\n      }\n    };\n    this.unmountApiKeys = node => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.unmountApiKeys(node);\n      } else {\n        this.premountApiKeysNodes.delete(node);\n      }\n    };\n    this.__internal_mountOAuthConsent = (node, props) => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.__internal_mountOAuthConsent(node, props);\n      } else {\n        this.premountOAuthConsentNodes.set(node, props);\n      }\n    };\n    this.__internal_unmountOAuthConsent = node => {\n      if (this.clerkjs && this.loaded) {\n        this.clerkjs.__internal_unmountOAuthConsent(node);\n      } else {\n        this.premountOAuthConsentNodes.delete(node);\n      }\n    };\n    this.addListener = listener => {\n      if (this.clerkjs) {\n        return this.clerkjs.addListener(listener);\n      } else {\n        const unsubscribe = () => {\n          var _a;\n          const listenerHandlers = this.premountAddListenerCalls.get(listener);\n          if (listenerHandlers) {\n            (_a = listenerHandlers.nativeUnsubscribe) == null ? void 0 : _a.call(listenerHandlers);\n            this.premountAddListenerCalls.delete(listener);\n          }\n        };\n        this.premountAddListenerCalls.set(listener, {\n          unsubscribe,\n          nativeUnsubscribe: void 0\n        });\n        return unsubscribe;\n      }\n    };\n    this.navigate = to => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.navigate(to);\n      };\n      if (this.clerkjs && this.loaded) {\n        void callback();\n      } else {\n        this.premountMethodCalls.set(\"navigate\", callback);\n      }\n    };\n    this.redirectWithAuth = async function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      const callback = () => {\n        var _a;\n        return (_a = _this.clerkjs) == null ? void 0 : _a.redirectWithAuth(...args);\n      };\n      if (_this.clerkjs && _this.loaded) {\n        return callback();\n      } else {\n        _this.premountMethodCalls.set(\"redirectWithAuth\", callback);\n        return;\n      }\n    };\n    this.redirectToSignIn = async opts => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.redirectToSignIn(opts);\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"redirectToSignIn\", callback);\n        return;\n      }\n    };\n    this.redirectToSignUp = async opts => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.redirectToSignUp(opts);\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"redirectToSignUp\", callback);\n        return;\n      }\n    };\n    this.redirectToUserProfile = async () => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.redirectToUserProfile();\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"redirectToUserProfile\", callback);\n        return;\n      }\n    };\n    this.redirectToAfterSignUp = () => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.redirectToAfterSignUp();\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"redirectToAfterSignUp\", callback);\n      }\n    };\n    this.redirectToAfterSignIn = () => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.redirectToAfterSignIn();\n      };\n      if (this.clerkjs && this.loaded) {\n        callback();\n      } else {\n        this.premountMethodCalls.set(\"redirectToAfterSignIn\", callback);\n      }\n    };\n    this.redirectToAfterSignOut = () => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.redirectToAfterSignOut();\n      };\n      if (this.clerkjs && this.loaded) {\n        callback();\n      } else {\n        this.premountMethodCalls.set(\"redirectToAfterSignOut\", callback);\n      }\n    };\n    this.redirectToOrganizationProfile = async () => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.redirectToOrganizationProfile();\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"redirectToOrganizationProfile\", callback);\n        return;\n      }\n    };\n    this.redirectToCreateOrganization = async () => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.redirectToCreateOrganization();\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"redirectToCreateOrganization\", callback);\n        return;\n      }\n    };\n    this.redirectToWaitlist = async () => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.redirectToWaitlist();\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"redirectToWaitlist\", callback);\n        return;\n      }\n    };\n    this.handleRedirectCallback = async params => {\n      var _a;\n      const callback = () => {\n        var _a2;\n        return (_a2 = this.clerkjs) == null ? void 0 : _a2.handleRedirectCallback(params);\n      };\n      if (this.clerkjs && this.loaded) {\n        void ((_a = callback()) == null ? void 0 : _a.catch(() => {}));\n      } else {\n        this.premountMethodCalls.set(\"handleRedirectCallback\", callback);\n      }\n    };\n    this.handleGoogleOneTapCallback = async (signInOrUp, params) => {\n      var _a;\n      const callback = () => {\n        var _a2;\n        return (_a2 = this.clerkjs) == null ? void 0 : _a2.handleGoogleOneTapCallback(signInOrUp, params);\n      };\n      if (this.clerkjs && this.loaded) {\n        void ((_a = callback()) == null ? void 0 : _a.catch(() => {}));\n      } else {\n        this.premountMethodCalls.set(\"handleGoogleOneTapCallback\", callback);\n      }\n    };\n    this.handleEmailLinkVerification = async params => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.handleEmailLinkVerification(params);\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"handleEmailLinkVerification\", callback);\n      }\n    };\n    this.authenticateWithMetamask = async params => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.authenticateWithMetamask(params);\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"authenticateWithMetamask\", callback);\n      }\n    };\n    this.authenticateWithCoinbaseWallet = async params => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.authenticateWithCoinbaseWallet(params);\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"authenticateWithCoinbaseWallet\", callback);\n      }\n    };\n    this.authenticateWithOKXWallet = async params => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.authenticateWithOKXWallet(params);\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"authenticateWithOKXWallet\", callback);\n      }\n    };\n    this.authenticateWithWeb3 = async params => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.authenticateWithWeb3(params);\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"authenticateWithWeb3\", callback);\n      }\n    };\n    this.authenticateWithGoogleOneTap = async params => {\n      const clerkjs = await __privateMethod(this, _IsomorphicClerk_instances, waitForClerkJS_fn).call(this);\n      return clerkjs.authenticateWithGoogleOneTap(params);\n    };\n    this.__internal_loadStripeJs = async () => {\n      const clerkjs = await __privateMethod(this, _IsomorphicClerk_instances, waitForClerkJS_fn).call(this);\n      return clerkjs.__internal_loadStripeJs();\n    };\n    this.createOrganization = async params => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.createOrganization(params);\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"createOrganization\", callback);\n      }\n    };\n    this.getOrganization = async organizationId => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.getOrganization(organizationId);\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"getOrganization\", callback);\n      }\n    };\n    this.joinWaitlist = async params => {\n      const callback = () => {\n        var _a;\n        return (_a = this.clerkjs) == null ? void 0 : _a.joinWaitlist(params);\n      };\n      if (this.clerkjs && this.loaded) {\n        return callback();\n      } else {\n        this.premountMethodCalls.set(\"joinWaitlist\", callback);\n      }\n    };\n    this.signOut = async function () {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      const callback = () => {\n        var _a;\n        return (_a = _this.clerkjs) == null ? void 0 : _a.signOut(...args);\n      };\n      if (_this.clerkjs && _this.loaded) {\n        return callback();\n      } else {\n        _this.premountMethodCalls.set(\"signOut\", callback);\n      }\n    };\n    const {\n      Clerk = null,\n      publishableKey\n    } = options || {};\n    __privateSet(this, _publishableKey, publishableKey);\n    __privateSet(this, _proxyUrl, options == null ? void 0 : options.proxyUrl);\n    __privateSet(this, _domain, options == null ? void 0 : options.domain);\n    this.options = options;\n    this.Clerk = Clerk;\n    this.mode = inBrowser() ? \"browser\" : \"server\";\n    if (!this.options.sdkMetadata) {\n      this.options.sdkMetadata = SDK_METADATA;\n    }\n    __privateGet(this, _eventBus).emit(clerkEvents.Status, \"loading\");\n    __privateGet(this, _eventBus).prioritizedOn(clerkEvents.Status, status => __privateSet(this, _status, status));\n    if (__privateGet(this, _publishableKey)) {\n      void this.loadClerkJS();\n    }\n  }\n  get publishableKey() {\n    return __privateGet(this, _publishableKey);\n  }\n  get loaded() {\n    var _a;\n    return ((_a = this.clerkjs) == null ? void 0 : _a.loaded) || false;\n  }\n  get status() {\n    var _a;\n    if (!this.clerkjs) {\n      return __privateGet(this, _status);\n    }\n    return ((_a = this.clerkjs) == null ? void 0 : _a.status) || (\n    /**\n    * Support older clerk-js versions.\n    * If clerk-js is available but `.status` is missing it we need to fallback to `.loaded`.\n    * Since \"degraded\" an \"error\" did not exist before,\n    * map \"loaded\" to \"ready\" and \"not loaded\" to \"loading\".\n    */\n    this.clerkjs.loaded ? \"ready\" : \"loading\");\n  }\n  static getOrCreateInstance(options) {\n    if (!inBrowser() || !__privateGet(this, _instance) || options.Clerk && __privateGet(this, _instance).Clerk !== options.Clerk ||\n    // Allow hot swapping PKs on the client\n    __privateGet(this, _instance).publishableKey !== options.publishableKey) {\n      __privateSet(this, _instance, new _IsomorphicClerk(options));\n    }\n    return __privateGet(this, _instance);\n  }\n  static clearInstance() {\n    __privateSet(this, _instance, null);\n  }\n  get domain() {\n    if (typeof window !== \"undefined\" && window.location) {\n      return handleValueOrFn(__privateGet(this, _domain), new URL(window.location.href), \"\");\n    }\n    if (typeof __privateGet(this, _domain) === \"function\") {\n      return errorThrower.throw(unsupportedNonBrowserDomainOrProxyUrlFunction);\n    }\n    return __privateGet(this, _domain) || \"\";\n  }\n  get proxyUrl() {\n    if (typeof window !== \"undefined\" && window.location) {\n      return handleValueOrFn(__privateGet(this, _proxyUrl), new URL(window.location.href), \"\");\n    }\n    if (typeof __privateGet(this, _proxyUrl) === \"function\") {\n      return errorThrower.throw(unsupportedNonBrowserDomainOrProxyUrlFunction);\n    }\n    return __privateGet(this, _proxyUrl) || \"\";\n  }\n  /**\n   * Accesses private options from the `Clerk` instance and defaults to\n   * `IsomorphicClerk` options when in SSR context.\n   *  @internal\n   */\n  __internal_getOption(key) {\n    var _a, _b;\n    return ((_a = this.clerkjs) == null ? void 0 : _a.__internal_getOption) ? (_b = this.clerkjs) == null ? void 0 : _b.__internal_getOption(key) : this.options[key];\n  }\n  get sdkMetadata() {\n    var _a;\n    return ((_a = this.clerkjs) == null ? void 0 : _a.sdkMetadata) || this.options.sdkMetadata || void 0;\n  }\n  get instanceType() {\n    var _a;\n    return (_a = this.clerkjs) == null ? void 0 : _a.instanceType;\n  }\n  get frontendApi() {\n    var _a;\n    return ((_a = this.clerkjs) == null ? void 0 : _a.frontendApi) || \"\";\n  }\n  get isStandardBrowser() {\n    var _a;\n    return ((_a = this.clerkjs) == null ? void 0 : _a.isStandardBrowser) || this.options.standardBrowser || false;\n  }\n  get isSatellite() {\n    if (typeof window !== \"undefined\" && window.location) {\n      return handleValueOrFn(this.options.isSatellite, new URL(window.location.href), false);\n    }\n    if (typeof this.options.isSatellite === \"function\") {\n      return errorThrower.throw(unsupportedNonBrowserDomainOrProxyUrlFunction);\n    }\n    return false;\n  }\n  async loadClerkJS() {\n    var _a;\n    if (this.mode !== \"browser\" || this.loaded) {\n      return;\n    }\n    if (typeof window !== \"undefined\") {\n      window.__clerk_publishable_key = __privateGet(this, _publishableKey);\n      window.__clerk_proxy_url = this.proxyUrl;\n      window.__clerk_domain = this.domain;\n    }\n    try {\n      if (this.Clerk) {\n        let c;\n        if (isConstructor(this.Clerk)) {\n          c = new this.Clerk(__privateGet(this, _publishableKey), {\n            proxyUrl: this.proxyUrl,\n            domain: this.domain\n          });\n          this.beforeLoad(c);\n          await c.load(this.options);\n        } else {\n          c = this.Clerk;\n          if (!c.loaded) {\n            this.beforeLoad(c);\n            await c.load(this.options);\n          }\n        }\n        global.Clerk = c;\n      } else if (!__BUILD_DISABLE_RHC__) {\n        if (!global.Clerk) {\n          await loadClerkJsScript({\n            ...this.options,\n            publishableKey: __privateGet(this, _publishableKey),\n            proxyUrl: this.proxyUrl,\n            domain: this.domain,\n            nonce: this.options.nonce\n          });\n        }\n        if (!global.Clerk) {\n          throw new Error(\"Failed to download latest ClerkJS. Contact support@clerk.com.\");\n        }\n        this.beforeLoad(global.Clerk);\n        await global.Clerk.load(this.options);\n      }\n      if ((_a = global.Clerk) == null ? void 0 : _a.loaded) {\n        return this.hydrateClerkJS(global.Clerk);\n      }\n      return;\n    } catch (err) {\n      const error = err;\n      __privateGet(this, _eventBus).emit(clerkEvents.Status, \"error\");\n      console.error(error.stack || error.message || error);\n      return;\n    }\n  }\n  get version() {\n    var _a;\n    return (_a = this.clerkjs) == null ? void 0 : _a.version;\n  }\n  get client() {\n    if (this.clerkjs) {\n      return this.clerkjs.client;\n    } else {\n      return void 0;\n    }\n  }\n  get session() {\n    if (this.clerkjs) {\n      return this.clerkjs.session;\n    } else {\n      return void 0;\n    }\n  }\n  get user() {\n    if (this.clerkjs) {\n      return this.clerkjs.user;\n    } else {\n      return void 0;\n    }\n  }\n  get organization() {\n    if (this.clerkjs) {\n      return this.clerkjs.organization;\n    } else {\n      return void 0;\n    }\n  }\n  get telemetry() {\n    if (this.clerkjs) {\n      return this.clerkjs.telemetry;\n    } else {\n      return void 0;\n    }\n  }\n  get __unstable__environment() {\n    if (this.clerkjs) {\n      return this.clerkjs.__unstable__environment;\n    } else {\n      return void 0;\n    }\n  }\n  get isSignedIn() {\n    if (this.clerkjs) {\n      return this.clerkjs.isSignedIn;\n    } else {\n      return false;\n    }\n  }\n  get billing() {\n    var _a;\n    return (_a = this.clerkjs) == null ? void 0 : _a.billing;\n  }\n  get apiKeys() {\n    var _a;\n    return (_a = this.clerkjs) == null ? void 0 : _a.apiKeys;\n  }\n  __unstable__setEnvironment() {\n    if (this.clerkjs && \"__unstable__setEnvironment\" in this.clerkjs) {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      this.clerkjs.__unstable__setEnvironment(args);\n    } else {\n      return void 0;\n    }\n  }\n};\n_status = new WeakMap();\n_domain = new WeakMap();\n_proxyUrl = new WeakMap();\n_publishableKey = new WeakMap();\n_eventBus = new WeakMap();\n_instance = new WeakMap();\n_IsomorphicClerk_instances = new WeakSet();\nwaitForClerkJS_fn = function () {\n  return new Promise(resolve => {\n    this.addOnLoaded(() => resolve(this.clerkjs));\n  });\n};\n__privateAdd(_IsomorphicClerk, _instance);\nvar IsomorphicClerk = _IsomorphicClerk;\n\n// src/contexts/ClerkContextProvider.tsx\nfunction ClerkContextProvider(props) {\n  const {\n    isomorphicClerkOptions,\n    initialState,\n    children\n  } = props;\n  const {\n    isomorphicClerk: clerk,\n    clerkStatus\n  } = useLoadedIsomorphicClerk(isomorphicClerkOptions);\n  const [state, setState] = React13.useState({\n    client: clerk.client,\n    session: clerk.session,\n    user: clerk.user,\n    organization: clerk.organization\n  });\n  React13.useEffect(() => {\n    return clerk.addListener(e => setState({\n      ...e\n    }));\n  }, []);\n  const derivedState = deriveState(clerk.loaded, state, initialState);\n  const clerkCtx = React13.useMemo(() => ({\n    value: clerk\n  }), [\n  // Only update the clerk reference on status change\n  clerkStatus]);\n  const clientCtx = React13.useMemo(() => ({\n    value: state.client\n  }), [state.client]);\n  const {\n    sessionId,\n    sessionStatus,\n    sessionClaims,\n    session,\n    userId,\n    user,\n    orgId,\n    actor,\n    organization,\n    orgRole,\n    orgSlug,\n    orgPermissions,\n    factorVerificationAge\n  } = derivedState;\n  const authCtx = React13.useMemo(() => {\n    const value = {\n      sessionId,\n      sessionStatus,\n      sessionClaims,\n      userId,\n      actor,\n      orgId,\n      orgRole,\n      orgSlug,\n      orgPermissions,\n      factorVerificationAge\n    };\n    return {\n      value\n    };\n  }, [sessionId, sessionStatus, userId, actor, orgId, orgRole, orgSlug, factorVerificationAge, sessionClaims == null ? void 0 : sessionClaims.__raw]);\n  const sessionCtx = React13.useMemo(() => ({\n    value: session\n  }), [sessionId, session]);\n  const userCtx = React13.useMemo(() => ({\n    value: user\n  }), [userId, user]);\n  const organizationCtx = React13.useMemo(() => {\n    const value = {\n      organization\n    };\n    return {\n      value\n    };\n  }, [orgId, organization]);\n  return (\n    // @ts-expect-error value passed is of type IsomorphicClerk where the context expects LoadedClerk\n    /* @__PURE__ */\n    React13.createElement(IsomorphicClerkContext.Provider, {\n      value: clerkCtx\n    }, /* @__PURE__ */React13.createElement(ClientContext.Provider, {\n      value: clientCtx\n    }, /* @__PURE__ */React13.createElement(SessionContext.Provider, {\n      value: sessionCtx\n    }, /* @__PURE__ */React13.createElement(OrganizationProvider, {\n      ...organizationCtx.value\n    }, /* @__PURE__ */React13.createElement(AuthContext.Provider, {\n      value: authCtx\n    }, /* @__PURE__ */React13.createElement(UserContext.Provider, {\n      value: userCtx\n    }, /* @__PURE__ */React13.createElement(CheckoutProvider, {\n      value: void 0\n    }, children)))))))\n  );\n}\nvar useLoadedIsomorphicClerk = options => {\n  const isomorphicClerkRef = React13.useRef(IsomorphicClerk.getOrCreateInstance(options));\n  const [clerkStatus, setClerkStatus] = React13.useState(isomorphicClerkRef.current.status);\n  React13.useEffect(() => {\n    void isomorphicClerkRef.current.__unstable__updateProps({\n      appearance: options.appearance\n    });\n  }, [options.appearance]);\n  React13.useEffect(() => {\n    void isomorphicClerkRef.current.__unstable__updateProps({\n      options\n    });\n  }, [options.localization]);\n  React13.useEffect(() => {\n    isomorphicClerkRef.current.on(\"status\", setClerkStatus);\n    return () => {\n      if (isomorphicClerkRef.current) {\n        isomorphicClerkRef.current.off(\"status\", setClerkStatus);\n      }\n      IsomorphicClerk.clearInstance();\n    };\n  }, []);\n  return {\n    isomorphicClerk: isomorphicClerkRef.current,\n    clerkStatus\n  };\n};\n\n// src/contexts/ClerkProvider.tsx\nfunction ClerkProviderBase(props) {\n  const {\n    initialState,\n    children,\n    __internal_bypassMissingPublishableKey,\n    ...restIsomorphicClerkOptions\n  } = props;\n  const {\n    publishableKey = \"\",\n    Clerk: userInitialisedClerk\n  } = restIsomorphicClerkOptions;\n  if (!userInitialisedClerk && !__internal_bypassMissingPublishableKey) {\n    if (!publishableKey) {\n      errorThrower.throwMissingPublishableKeyError();\n    } else if (publishableKey && !isPublishableKey(publishableKey)) {\n      errorThrower.throwInvalidPublishableKeyError({\n        key: publishableKey\n      });\n    }\n  }\n  return /* @__PURE__ */React14.createElement(ClerkContextProvider, {\n    initialState,\n    isomorphicClerkOptions: restIsomorphicClerkOptions\n  }, children);\n}\nvar ClerkProvider = withMaxAllowedInstancesGuard(ClerkProviderBase, \"ClerkProvider\", multipleClerkProvidersError);\nClerkProvider.displayName = \"ClerkProvider\";\n\n// src/index.ts\nsetErrorThrowerOptions({\n  packageName: \"@clerk/clerk-react\"\n});\nsetClerkJsLoadingErrorPackageName(\"@clerk/clerk-react\");\nexport { APIKeys, AuthenticateWithRedirectCallback, ClerkDegraded, ClerkFailed, ClerkLoaded, ClerkLoading, ClerkProvider, CreateOrganization, GoogleOneTap, OrganizationList, OrganizationProfile, OrganizationSwitcher, PricingTable, Protect, RedirectToCreateOrganization, RedirectToOrganizationProfile, RedirectToSignIn, RedirectToSignUp, RedirectToUserProfile, SignIn, SignInButton, SignInWithMetamaskButton, SignOutButton, SignUp, SignUpButton, SignedIn, SignedOut, UserButton, UserProfile, Waitlist, __experimental_CheckoutProvider, __experimental_PaymentElement, __experimental_PaymentElementProvider, __experimental_useCheckout, __experimental_usePaymentElement, useAuth, useClerk, useEmailLink, useOrganization, useOrganizationList, useReverification, useSession, useSessionList, useSignIn, useSignUp, useUser };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}