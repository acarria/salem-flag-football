{"ast":null,"code":"import { retry } from \"./chunk-N2V3PKFE.mjs\";\n\n// src/loadScript.ts\nvar NO_DOCUMENT_ERROR = \"loadScript cannot be called when document does not exist\";\nvar NO_SRC_ERROR = \"loadScript cannot be called without a src\";\nasync function loadScript() {\n  let src = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let opts = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    async,\n    defer,\n    beforeLoad,\n    crossOrigin,\n    nonce\n  } = opts || {};\n  const load = () => {\n    return new Promise((resolve, reject) => {\n      if (!src) {\n        reject(new Error(NO_SRC_ERROR));\n      }\n      if (!document || !document.body) {\n        reject(NO_DOCUMENT_ERROR);\n      }\n      const script = document.createElement(\"script\");\n      if (crossOrigin) script.setAttribute(\"crossorigin\", crossOrigin);\n      script.async = async || false;\n      script.defer = defer || false;\n      script.addEventListener(\"load\", () => {\n        script.remove();\n        resolve(script);\n      });\n      script.addEventListener(\"error\", () => {\n        script.remove();\n        reject();\n      });\n      script.src = src;\n      script.nonce = nonce;\n      beforeLoad?.(script);\n      document.body.appendChild(script);\n    });\n  };\n  return retry(load, {\n    shouldRetry: (_, iterations) => iterations <= 5\n  });\n}\nexport { loadScript };\n//# sourceMappingURL=chunk-E3R3SJ7O.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}