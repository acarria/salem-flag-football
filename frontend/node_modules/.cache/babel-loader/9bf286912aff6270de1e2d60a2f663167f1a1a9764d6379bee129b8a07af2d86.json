{"ast":null,"code":"// Top 10 most common typos for top 10 email providers\nconst COMMON_EMAIL_TYPOS = {\n  // Gmail typos\n  'gmal.com': 'gmail.com',\n  'gmial.com': 'gmail.com',\n  'gmaill.com': 'gmail.com',\n  'gmail.con': 'gmail.com',\n  'gmail.co': 'gmail.com',\n  'gmail.cmo': 'gmail.com',\n  'gmail.om': 'gmail.com',\n  'gamil.com': 'gmail.com',\n  'gmai.com': 'gmail.com',\n  'gmeil.com': 'gmail.com',\n  // Yahoo typos\n  'yaho.com': 'yahoo.com',\n  'yahoo.con': 'yahoo.com',\n  'yahoo.cmo': 'yahoo.com',\n  'yahoo.co': 'yahoo.com',\n  'yhoo.com': 'yahoo.com',\n  'yhaoo.com': 'yahoo.com',\n  'yahooo.com': 'yahoo.com',\n  'yahoo.om': 'yahoo.com',\n  'yhoo.con': 'yahoo.com',\n  'yhaoo.con': 'yahoo.com',\n  // Outlook typos\n  'outlok.com': 'outlook.com',\n  'outlook.con': 'outlook.com',\n  'outlook.cmo': 'outlook.com',\n  'outlook.co': 'outlook.com',\n  'outlok.con': 'outlook.com',\n  'outlok.cmo': 'outlook.com',\n  'outlook.om': 'outlook.com',\n  'outlok.om': 'outlook.com',\n  'outlok.co': 'outlook.com',\n  'outlook.cm': 'outlook.com',\n  // iCloud typos\n  'icloud.con': 'icloud.com',\n  'icloud.cmo': 'icloud.com',\n  'icloud.co': 'icloud.com',\n  'iclod.com': 'icloud.com',\n  'iclod.con': 'icloud.com',\n  'iclod.cmo': 'icloud.com',\n  'icloud.om': 'icloud.com',\n  'iclod.co': 'icloud.com',\n  'icloud.cm': 'icloud.com',\n  'iclod.om': 'icloud.com',\n  // AOL typos\n  'aol.con': 'aol.com',\n  'aol.cmo': 'aol.com',\n  'aol.co': 'aol.com',\n  'aol.om': 'aol.com',\n  'aol.cm': 'aol.com',\n  // Hotmail typos\n  'hotmial.com': 'hotmail.com',\n  'hotmil.com': 'hotmail.com',\n  'hotmail.con': 'hotmail.com',\n  'hotmail.cmo': 'hotmail.com',\n  'hotmail.co': 'hotmail.com',\n  'hotmial.con': 'hotmail.com',\n  'hotmil.con': 'hotmail.com',\n  'hotmail.om': 'hotmail.com',\n  'hotmial.cmo': 'hotmail.com',\n  'hotmil.cmo': 'hotmail.com',\n  // ProtonMail typos\n  'protonmail.con': 'protonmail.com',\n  'protonmail.cmo': 'protonmail.com',\n  'protonmail.co': 'protonmail.com',\n  'protonmal.com': 'protonmail.com',\n  'protonmal.con': 'protonmail.com',\n  'protonmail.om': 'protonmail.com',\n  'protonmal.cmo': 'protonmail.com',\n  'protonmal.co': 'protonmail.com',\n  'protonmail.cm': 'protonmail.com',\n  'protonmal.om': 'protonmail.com',\n  // Zoho typos\n  'zoho.con': 'zoho.com',\n  'zoho.cmo': 'zoho.com',\n  'zoho.co': 'zoho.com',\n  'zoho.om': 'zoho.com',\n  'zoho.cm': 'zoho.com',\n  // Yandex typos\n  'yandex.con': 'yandex.com',\n  'yandex.cmo': 'yandex.com',\n  'yandex.co': 'yandex.com',\n  'yandex.om': 'yandex.com',\n  'yandex.cm': 'yandex.com',\n  // Tutanota typos\n  'tutanota.con': 'tutanota.com',\n  'tutanota.cmo': 'tutanota.com',\n  'tutanota.co': 'tutanota.com',\n  'tutanota.om': 'tutanota.com',\n  'tutanota.cm': 'tutanota.com'\n};\n\n// Email validation with typo detection\nexport function isValidEmail(email) {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n// US phone validation (accepts (xxx) xxx-xxxx, xxx-xxx-xxxx, xxx.xxx.xxxx, xxx xxx xxxx, xxxxxxxxxx)\nexport function isValidUSPhone(phone) {\n  return /^(\\+1[\\s.-]?)?(\\([2-9][0-9]{2}\\)|[2-9][0-9]{2})[\\s.-]?[0-9]{3}[\\s.-]?[0-9]{4}$/.test(phone.trim());\n}\n\n// Enhanced email validation with typo detection\nexport function getEmailError(email) {\n  var _email$split$;\n  if (!email) return 'Email is required.';\n  if (!isValidEmail(email)) {\n    return 'Please enter a valid email address.';\n  }\n\n  // Check for common typos\n  const domain = ((_email$split$ = email.split('@')[1]) === null || _email$split$ === void 0 ? void 0 : _email$split$.toLowerCase()) || '';\n  for (const [typo, correct] of Object.entries(COMMON_EMAIL_TYPOS)) {\n    if (domain === typo) {\n      return `Did you mean ${email.split('@')[0]}@${correct}?`;\n    }\n  }\n  return null;\n}\nexport function getPhoneError(phone) {\n  if (!phone) return 'Phone number is required.';\n  if (!isValidUSPhone(phone)) return 'Please enter a valid US phone number.';\n  return null;\n}","map":{"version":3,"names":["COMMON_EMAIL_TYPOS","isValidEmail","email","emailRegex","test","isValidUSPhone","phone","trim","getEmailError","_email$split$","domain","split","toLowerCase","typo","correct","Object","entries","getPhoneError"],"sources":["/app/src/utils/validation.ts"],"sourcesContent":["// Top 10 most common typos for top 10 email providers\nconst COMMON_EMAIL_TYPOS: { [key: string]: string } = {\n  // Gmail typos\n  'gmal.com': 'gmail.com',\n  'gmial.com': 'gmail.com', \n  'gmaill.com': 'gmail.com',\n  'gmail.con': 'gmail.com',\n  'gmail.co': 'gmail.com',\n  'gmail.cmo': 'gmail.com',\n  'gmail.om': 'gmail.com',\n  'gamil.com': 'gmail.com',\n  'gmai.com': 'gmail.com',\n  'gmeil.com': 'gmail.com',\n\n  // Yahoo typos\n  'yaho.com': 'yahoo.com',\n  'yahoo.con': 'yahoo.com',\n  'yahoo.cmo': 'yahoo.com',\n  'yahoo.co': 'yahoo.com',\n  'yhoo.com': 'yahoo.com',\n  'yhaoo.com': 'yahoo.com',\n  'yahooo.com': 'yahoo.com',\n  'yahoo.om': 'yahoo.com',\n  'yhoo.con': 'yahoo.com',\n  'yhaoo.con': 'yahoo.com',\n\n  // Outlook typos\n  'outlok.com': 'outlook.com',\n  'outlook.con': 'outlook.com',\n  'outlook.cmo': 'outlook.com',\n  'outlook.co': 'outlook.com',\n  'outlok.con': 'outlook.com',\n  'outlok.cmo': 'outlook.com',\n  'outlook.om': 'outlook.com',\n  'outlok.om': 'outlook.com',\n  'outlok.co': 'outlook.com',\n  'outlook.cm': 'outlook.com',\n\n  // iCloud typos\n  'icloud.con': 'icloud.com',\n  'icloud.cmo': 'icloud.com',\n  'icloud.co': 'icloud.com',\n  'iclod.com': 'icloud.com',\n  'iclod.con': 'icloud.com',\n  'iclod.cmo': 'icloud.com',\n  'icloud.om': 'icloud.com',\n  'iclod.co': 'icloud.com',\n  'icloud.cm': 'icloud.com',\n  'iclod.om': 'icloud.com',\n\n  // AOL typos\n  'aol.con': 'aol.com',\n  'aol.cmo': 'aol.com',\n  'aol.co': 'aol.com',\n  'aol.om': 'aol.com',\n  'aol.cm': 'aol.com',\n\n  // Hotmail typos\n  'hotmial.com': 'hotmail.com',\n  'hotmil.com': 'hotmail.com',\n  'hotmail.con': 'hotmail.com',\n  'hotmail.cmo': 'hotmail.com',\n  'hotmail.co': 'hotmail.com',\n  'hotmial.con': 'hotmail.com',\n  'hotmil.con': 'hotmail.com',\n  'hotmail.om': 'hotmail.com',\n  'hotmial.cmo': 'hotmail.com',\n  'hotmil.cmo': 'hotmail.com',\n\n  // ProtonMail typos\n  'protonmail.con': 'protonmail.com',\n  'protonmail.cmo': 'protonmail.com',\n  'protonmail.co': 'protonmail.com',\n  'protonmal.com': 'protonmail.com',\n  'protonmal.con': 'protonmail.com',\n  'protonmail.om': 'protonmail.com',\n  'protonmal.cmo': 'protonmail.com',\n  'protonmal.co': 'protonmail.com',\n  'protonmail.cm': 'protonmail.com',\n  'protonmal.om': 'protonmail.com',\n\n  // Zoho typos\n  'zoho.con': 'zoho.com',\n  'zoho.cmo': 'zoho.com',\n  'zoho.co': 'zoho.com',\n  'zoho.om': 'zoho.com',\n  'zoho.cm': 'zoho.com',\n\n  // Yandex typos\n  'yandex.con': 'yandex.com',\n  'yandex.cmo': 'yandex.com',\n  'yandex.co': 'yandex.com',\n  'yandex.om': 'yandex.com',\n  'yandex.cm': 'yandex.com',\n\n  // Tutanota typos\n  'tutanota.con': 'tutanota.com',\n  'tutanota.cmo': 'tutanota.com',\n  'tutanota.co': 'tutanota.com',\n  'tutanota.om': 'tutanota.com',\n  'tutanota.cm': 'tutanota.com'\n};\n\n// Email validation with typo detection\nexport function isValidEmail(email: string): boolean {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n}\n\n// US phone validation (accepts (xxx) xxx-xxxx, xxx-xxx-xxxx, xxx.xxx.xxxx, xxx xxx xxxx, xxxxxxxxxx)\nexport function isValidUSPhone(phone: string): boolean {\n  return /^(\\+1[\\s.-]?)?(\\([2-9][0-9]{2}\\)|[2-9][0-9]{2})[\\s.-]?[0-9]{3}[\\s.-]?[0-9]{4}$/.test(phone.trim());\n}\n\n// Enhanced email validation with typo detection\nexport function getEmailError(email: string): string | null {\n  if (!email) return 'Email is required.';\n  \n  if (!isValidEmail(email)) {\n    return 'Please enter a valid email address.';\n  }\n\n  // Check for common typos\n  const domain = email.split('@')[1]?.toLowerCase() || '';\n  for (const [typo, correct] of Object.entries(COMMON_EMAIL_TYPOS)) {\n    if (domain === typo) {\n      return `Did you mean ${email.split('@')[0]}@${correct}?`;\n    }\n  }\n\n  return null;\n}\n\nexport function getPhoneError(phone: string): string | null {\n  if (!phone) return 'Phone number is required.';\n  if (!isValidUSPhone(phone)) return 'Please enter a valid US phone number.';\n  return null;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}