{"ast":null,"code":"import { isProductionEnvironment, isTestEnvironment } from \"./chunk-7HPDNZ3R.mjs\";\n\n// src/deprecated.ts\nvar displayedWarnings = /* @__PURE__ */new Set();\nvar deprecated = (fnName, warning, key) => {\n  const hideWarning = isTestEnvironment() || isProductionEnvironment();\n  const messageId = key ?? fnName;\n  if (displayedWarnings.has(messageId) || hideWarning) {\n    return;\n  }\n  displayedWarnings.add(messageId);\n  console.warn(`Clerk - DEPRECATION WARNING: \"${fnName}\" is deprecated and will be removed in the next major release.\n${warning}`);\n};\nvar deprecatedProperty = function (cls, propName, warning) {\n  let isStatic = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const target = isStatic ? cls : cls.prototype;\n  let value = target[propName];\n  Object.defineProperty(target, propName, {\n    get() {\n      deprecated(propName, warning, `${cls.name}:${propName}`);\n      return value;\n    },\n    set(v) {\n      value = v;\n    }\n  });\n};\nvar deprecatedObjectProperty = (obj, propName, warning, key) => {\n  let value = obj[propName];\n  Object.defineProperty(obj, propName, {\n    get() {\n      deprecated(propName, warning, key);\n      return value;\n    },\n    set(v) {\n      value = v;\n    }\n  });\n};\nexport { deprecated, deprecatedProperty, deprecatedObjectProperty };\n//# sourceMappingURL=chunk-UEY4AZIP.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}